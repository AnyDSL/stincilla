fn @iteration_merge(math: Intrinsics, RHSC: Img, Sol: Img, RHSF: Img,
                    bh_lower: BoundaryFn[f32], bh_upper: BoundaryFn[f32],
                    residual: fn(Intrinsics, i32, i32, Acc[f32], Acc[f32], Acc[f32], Mask) -> (), residual_mask: Mask, // RHS + sum(Sol) -> Res
                    restrict: fn(Intrinsics, i32, i32, Acc[f32], Acc[f32]) -> (),                                      // Res -> RHS(+1)
                   ) -> () {
    let acc      = accelerator(device_id);
    let sol_gpu  = alloc_img[f32](Sol,  acc.alloc);
    let rhsf_gpu = alloc_img[f32](RHSF, acc.alloc);
    let rhsc_gpu = alloc_img[f32](RHSC, acc.alloc);
    copy_img(RHSF, rhsf_gpu);
    copy_img(Sol,  sol_gpu);

    let step  = 2; // restrict by 2x
    let grid  = (Sol.width, Sol.height, 1);
    let block = (64, step, 1);

    for benchmark_acc(acc) {
        for work_item in acc.exec(grid, block) {
            let tid_x  = work_item.tidx();
            let tid_y  = work_item.tidy();
            let bid_x  = work_item.bidx();
            let bid_y  = work_item.bidy();
            let bdim_x = work_item.bdimx();
            let bdim_y = work_item.bdimy();
            let gid_y  = tid_y + bdim_y * bid_y;

            let (spm_stride, spm_height, _) = block;
            let spm = reserve_shared[f32](spm_stride * spm_height);

            // residual: index space == block
            let tmp_acc  = get_acc_memory[f32](set_pixel_shared_fn[f32](spm), get_pixel_shared_fn[f32](spm), spm_stride, spm_height);
            let rhsf_acc = get_acc_offset[f32](rhsf_gpu, set_pixel_fn[f32](rhsf_gpu), get_pixel_fn[f32](rhsf_gpu), bdim_x * bid_x, bdim_y * bid_y);
            let sol_acc  = get_acc_bh_offset[f32](sol_gpu, set_pixel_fn[f32](sol_gpu), get_pixel_ldg_fn[f32](sol_gpu), bdim_x * bid_x, bdim_y * bid_y, (Boundary::Unknown, Boundary::Unknown), bh_lower, bh_upper);
            @residual(math, tid_x, tid_y, tmp_acc, sol_acc, rhsf_acc, residual_mask);

            acc.barrier();

            // restrict: index space == block
            if tid_x < spm_stride / step && gid_y % step == 0 {
                let tmp_acc = get_acc_memory[f32](set_pixel_shared_fn[f32](spm), get_pixel_shared_fn[f32](spm), spm_stride, spm_height);
                let rhs_acc = get_acc_offset[f32](rhsc_gpu, set_pixel_fn[f32](rhsc_gpu), get_pixel_fn[f32](rhsc_gpu), bdim_x * bid_x / step, bdim_y * bid_y / step);
                @restrict(math, tid_x, tid_y, rhs_acc, tmp_acc);
            }
        }
    }

    copy_img(rhsc_gpu, RHSC);
    release(sol_gpu.buf);
    release(rhsf_gpu.buf);
    release(rhsc_gpu.buf);
}
