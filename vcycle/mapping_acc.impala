fn @iteration_merge(math: Intrinsics, RHSC: Img, Sol: Img, RHSF: Img,
                    bh_lower: BoundaryFn, bh_upper: BoundaryFn,
                    residual: fn(Intrinsics, i32, i32, Acc, Acc, Acc, Mask) -> (), residual_mask: Mask, // RHS + sum(Sol) -> Res
                    restrict: fn(Intrinsics, i32, i32, Acc, Acc) -> (),                                 // Res -> RHS(+1)
                   ) -> () {
    let acc      = accelerator(device_id);
    let sol_gpu  = alloc_img(Sol,  acc.alloc);
    let rhsf_gpu = alloc_img(RHSF, acc.alloc);
    let rhsc_gpu = alloc_img(RHSC, acc.alloc);
    copy_img(RHSF, rhsf_gpu);
    copy_img(Sol,  sol_gpu);

    let step  = 2; // restrict by 2x
    let grid  = (Sol.width, Sol.height, 1);
    let block = (64, step, 1);

    for benchmark_acc(acc) {
        for tid, bid, bdim, gdim, gid in acc.exec(grid, block) {
            let (tidx,  tidy,  _) = tid;
            let (bidx,  bidy,  _) = bid;
            let (bdimx, bdimy, _) = bdim;
            let tid_x  = tidx();
            let tid_y  = tidy();
            let bid_x  = bidx();
            let bid_y  = bidy();
            let bdim_x = bdimx();
            let bdim_y = bdimy();
            let gid_y  = tid_y + bdim_y * bid_y;

            let spm_stride = block(0);
            let spm_height = block(1);
            let spm = reserve_shared[f32](spm_stride * spm_height);

            // residual: index space == block
            let tmp_acc  = get_acc_memory(set_pixel_shared_fn(spm), get_pixel_shared_fn(spm), spm_stride, spm_height);
            let rhsf_acc = get_acc_offset(rhsf_gpu, set_pixel_fn(rhsf_gpu), get_pixel_fn(rhsf_gpu), bdim_x * bid_x, bdim_y * bid_y);
            let sol_acc  = get_acc_bh_offset(sol_gpu, set_pixel_fn(sol_gpu), get_pixel_ldg_fn(sol_gpu), bdim_x * bid_x, bdim_y * bid_y, (Boundary::Unknown, Boundary::Unknown), bh_lower, bh_upper);
            @@residual(math, tid_x, tid_y, tmp_acc, sol_acc, rhsf_acc, residual_mask);

            acc.barrier();

            // restrict: index space == block
            if tid_x < block(0) / step && gid_y % step == 0 {
                let tmp_acc = get_acc_memory(set_pixel_shared_fn(spm), get_pixel_shared_fn(spm), spm_stride, spm_height);
                let rhs_acc = get_acc_offset(rhsc_gpu, set_pixel_fn(rhsc_gpu), get_pixel_fn(rhsc_gpu), bdim_x * bid_x / step, bdim_y * bid_y / step);
                @@restrict(math, tid_x, tid_y, rhs_acc, tmp_acc);
            }
        }
    }

    copy_img(rhsc_gpu, RHSC);
    release(sol_gpu.buf);
    release(rhsf_gpu.buf);
    release(rhsc_gpu.buf);
}
