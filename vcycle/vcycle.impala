// Deriv 2D
fn @deriv2D(RHS: Img, img: Img) -> () {
    let mask = get_mask3([[0.0f,  1.0f, 0.0f],
                          [1.0f, -4.0f, 1.0f],
                          [0.0f,  1.0f, 0.0f]]);
    for math, x, y, rhs_acc, accs in iteration_bounds(math, RHS, make_img_list1(img, (mask.size_x / 2, mask.size_y / 2)), mirror_lower, mirror_upper) {
        rhs_acc.write(x, y, apply_stencil(x, y, accs.get(0), mask));
    }
}


// Jacobi
static omega = 0.8f;
static jacobi_mask = Mask {
    data : @|x: i32, y: i32| -> f32 { [[0.00f, 0.25f, 0.00f],
                                       [0.25f, 0.00f, 0.25f],
                                       [0.00f, 0.25f, 0.00f]](y)(x) },
    size_x : 3, size_y : 3
};
// Dirichlet boundary handling -> 0
//static dirichlet_lower = wrap_const_fun(const_lower, 0.0f);
//static dirichlet_upper = wrap_const_fun(const_upper, 0.0f);
fn @dirichlet_lower(idx: i32, lower: i32, upper: i32) -> BoundaryMode { const_lower(idx, lower, upper, 0.0f) }
fn @dirichlet_upper(idx: i32, lower: i32, upper: i32) -> BoundaryMode { const_upper(idx, lower, upper, 0.0f) }
fn @jacobi_solver(math: Intrinsics, x: i32, y: i32, Sol: Acc, Tmp: Acc, RHS: Acc, mask: Mask) -> () {
    let val = (1.0f - omega) * Tmp.read(x, y) +
              0.25f * omega  * RHS.read(x, y) + apply_stencil(x, y, Tmp, mask);
    Sol.write(x, y, val);
}

fn @jacobi(Sol: Img, Tmp: Img, RHS: Img, omega: f32) -> () {
    for math, x, y, Sol, accs in iteration_bounds(math, Sol, make_img_list2(Tmp, (jacobi_mask.size_x / 2, jacobi_mask.size_y / 2), RHS, (0, 0)), dirichlet_lower, dirichlet_upper) {
        let (Tmp, RHS) = (accs.get(0), accs.get(1));
        let val = (1.0f - omega) * Tmp.read(x, y) +
                  0.25f * omega  * RHS.read(x, y) + apply_stencil(x, y, Tmp, jacobi_mask);
        Sol.write(x, y, val);
    }
}


// Residual
static residual_mask = Mask {
    data : @|x: i32, y: i32| -> f32 { [[0.0f,  1.0f, 0.0f],
                                       [1.0f, -4.0f, 1.0f],
                                       [0.0f,  1.0f, 0.0f]](y)(x) },
    size_x : 3, size_y : 3
};
fn @residual_fun(math: Intrinsics, x: i32, y: i32, Res: Acc, Sol: Acc, RHS: Acc, mask: Mask) -> () {
    let val = RHS.read(x, y) + apply_stencil(x, y, Sol, mask);
    Res.write(x, y, val);
}

fn @residual(math: Intrinsics, Res: Img, Sol: Img, RHS: Img) -> () {
    for math, x, y, Res, accs in iteration_bounds(math, Res, make_img_list2(Sol, (residual_mask.size_x / 2, residual_mask.size_y / 2), RHS, (0, 0)), dirichlet_lower, dirichlet_upper) {
        let (Sol, RHS) = (accs.get(0), accs.get(1));
        let val = RHS.read(x, y) + apply_stencil(x, y, Sol, residual_mask);
        Res.write(x, y, val);
    }
}


// Restrict: arr = size x size; out = size/2 x size/2; fine -> coarse
// coarse = Stencil * fine;
static restrict_mask = Mask {
    data : @|x: i32, y: i32| -> f32 { [[0.25f, 0.50f, 0.25f],
                                       [0.50f, 1.00f, 0.50f],
                                       [0.25f, 0.50f, 0.25f]](y)(x) },
    size_x : 3, size_y : 3
};
fn @restrict_fun(math: Intrinsics, x: i32, y: i32, RHS: Acc, Res: Acc) -> () {
    let val = Res.read(2*x,   2*y  ) +
              Res.read(2*x+1, 2*y  ) +
              Res.read(2*x,   2*y+1) +
              Res.read(2*x+1, 2*y+1);
    RHS.write(x, y, val);
}

fn @restrict(math: Intrinsics, RHS: Img, Res: Img) -> () {
    for math, x, y, RHS, accs in iteration(math, RHS, make_img_list1(Res, (0, 0)), nobh_center, nobh_center) {
        let Res = accs.get(0);
        let val = Res.read(2*x,   2*y  ) +
                  Res.read(2*x+1, 2*y  ) +
                  Res.read(2*x,   2*y+1) +
                  Res.read(2*x+1, 2*y+1);
        RHS.write(x, y, val);
    }
}


// Interpolate: arr = size/2 x size/2; out = size x size; coarse -> fine
// fine += Stencil * coarse:
static interpolate_mask = Mask {
    data : @|x: i32, y: i32| -> f32 { [[0.25f, 0.50f, 0.25f],
                                       [0.50f, 1.00f, 0.50f],
                                       [0.25f, 0.50f, 0.25f]](y)(x) },
    size_x : 3, size_y : 3
};
fn @interpolate_fun(math: Intrinsics, x: i32, y: i32, SolF: Acc, SolC: Acc) -> () {
    let val = SolC.read(x, y);
    SolF.write(2*x  , 2*y  , SolF.read(2*x  , 2*y  ) + val);
    SolF.write(2*x+1, 2*y  , SolF.read(2*x+1, 2*y  ) + val);
    SolF.write(2*x  , 2*y+1, SolF.read(2*x  , 2*y+1) + val);
    SolF.write(2*x+1, 2*y+1, SolF.read(2*x+1, 2*y+1) + val);
}

fn @interpolate(SolF: Img, SolC: Img) -> () {
    // use iteration space of SolC, compute 4x elements
    for math, x, y, SolC, accs in iteration(math, SolC, make_img_list1(SolF, (0, 0)), nobh_center, nobh_center) {
        let SolF = accs.get(0);
        let val = SolC.read(x, y);
        SolF.write(2*x  , 2*y  , SolF.read(2*x  , 2*y  ) + val);
        SolF.write(2*x+1, 2*y  , SolF.read(2*x+1, 2*y  ) + val);
        SolF.write(2*x  , 2*y+1, SolF.read(2*x  , 2*y+1) + val);
        SolF.write(2*x+1, 2*y+1, SolF.read(2*x+1, 2*y+1) + val);
    }
}


// L2 norm
fn @l2norm(img: Img) -> f32 {
    // TODO: runs only on the CPU atm
    let mut l2sum = 0.0f;
    for y in range(0, img.height) {
        for x in range(0, img.width) {
            let value = bitcast[&[f32]](img.buf.data)(y * img.stride + x);
            l2sum += value*value;
        }
    }
    cpu_intrinsics.sqrtf(l2sum) / (img.width*img.height) as f32
}


// normal V-Cycle, components are hard-coded
fn vcycle_reference(RHS0: Img, levels: i32, vsteps: i32, ssteps: i32) -> Img {
    let width  = RHS0.width;
    let height = RHS0.height;
    let RHS = ~[levels:Img];
    let Sol = ~[levels:Img];
    let Tmp = ~[levels:Img];
    let Res = ~[levels:Img];
    for level in range(0, levels) {
        fn init_img(level: i32) -> Img { create_img(width >> level, height >> level, alloc_cpu) }
        RHS(level) = if level == 0 { RHS0 } else { init_img(level) };
        Sol(level) = init_img(level);
        Res(level) = init_img(level);
        Tmp(level) = init_img(level);
        init_zero(bitcast[&mut[f32]](Tmp(level).buf.data), Tmp(level).stride, Tmp(level).height);
    }

    fn vcycle_intern(level: i32) -> () {
        if level == levels-1 {
            // smooth
            for i in range(0, ssteps) {
                if i>0 { let tmp = Sol(level); Sol(level) = Tmp(level); Tmp(level) = tmp; }
                jacobi(Sol(level), Tmp(level), RHS(level), omega);
            }
        } else {
            // pre-smooth
            for i in range(0, ssteps) {
                if i>0 { let tmp = Sol(level); Sol(level) = Tmp(level); Tmp(level) = tmp; }
                jacobi(Sol(level), Tmp(level), RHS(level), omega);
            }

            residual(math, Res(level), Sol(level), RHS(level));
            restrict(math, RHS(level+1), Res(level));

            //if level == 0 { print_string("L2 norm: "); print_f32(l2norm(Res(level))); print_char('\n'); }

            init_zero(bitcast[&mut[f32]](Tmp(level+1).buf.data), Tmp(level+1).stride, Tmp(level+1).height);
            vcycle_intern(level+1);

            interpolate(Sol(level), Sol(level+1));

            // post-smooth
            for i in range(0, ssteps) {
                if i>0 { let tmp = Sol(level); Sol(level) = Tmp(level); Tmp(level) = tmp; }
                jacobi(Sol(level), Tmp(level), RHS(level), omega);
            }
        }
    }
    for i in range(0, vsteps) {
        vcycle_intern(0);
    }

    let result = Sol(0);

    for level in range(0, levels) {
        if level != 0 {
            release(RHS(level).buf);
            release(Sol(level).buf);
        }
        release(Res(level).buf);
        release(Tmp(level).buf);
    }

    runtime_release(0, bitcast[&[i8]](RHS));
    runtime_release(0, bitcast[&[i8]](Sol));
    runtime_release(0, bitcast[&[i8]](Tmp));
    runtime_release(0, bitcast[&[i8]](Res));

    result
}


// V-Cycle DSL: solver, etc. can be provided by the user
fn @vcycle_dsl(RHS0: Img, levels: i32, vsteps: i32, ssteps: i32,
              solver: fn(Intrinsics, i32, i32, Acc, Acc, Acc, Mask) -> (), solver_mask: Mask,
              residual: fn(Intrinsics, i32, i32, Acc, Acc, Acc, Mask) -> (), residual_mask: Mask,
              restrict: fn(Intrinsics, i32, i32, Acc, Acc) -> (),
              interpolate: fn(Intrinsics, i32, i32, Acc, Acc) -> ()
             ) -> Img {
    let width  = RHS0.width;
    let height = RHS0.height;
    let RHS = ~[levels:Img];
    let Sol = ~[levels:Img];
    let Tmp = ~[levels:Img];
    let Res = ~[levels:Img];
    for level in unroll(0, levels) {
        fn init_img(level: i32) -> Img { create_img(width >> level, height >> level, alloc_cpu) }
        RHS(level) = if level == 0 { RHS0 } else { init_img(level) };
        Sol(level) = init_img(level);
        Res(level) = init_img(level);
        Tmp(level) = init_img(level);
        init_zero(bitcast[&mut[f32]](Tmp(level).buf.data), Tmp(level).stride, Tmp(level).height);
    }

    fn @(?level) vcycle_dsl_intern(level: i32) -> () {
        if level == levels-1 {
            // smooth
            for i in unroll(0, ssteps) {
                if i>0 { let tmp = Sol(level); Sol(level) = Tmp(level); Tmp(level) = tmp; }
                for math, x, y, sol_acc, accs in iteration_bounds(math, Sol(level), make_img_list2(Tmp(level), (solver_mask.size_x / 2, solver_mask.size_y / 2), RHS(level), (0, 0)) , dirichlet_lower, dirichlet_upper) {
                    let (tmp_acc, rhs_acc) = (accs.get(0), accs.get(1));
                    solver(math, x, y, sol_acc, tmp_acc, rhs_acc, solver_mask);
                }
            }
        } else {
            // pre-smooth
            for i in unroll(0, ssteps) {
                if i>0 { let tmp = Sol(level); Sol(level) = Tmp(level); Tmp(level) = tmp; }
                for math, x, y, sol_acc, accs in iteration_bounds(math, Sol(level), make_img_list2(Tmp(level), (solver_mask.size_x / 2, solver_mask.size_y / 2), RHS(level), (0, 0)), dirichlet_lower, dirichlet_upper) {
                    let (tmp_acc, rhs_acc) = (accs.get(0), accs.get(1));
                    solver(math, x, y, sol_acc, tmp_acc, rhs_acc, solver_mask);
                }
            }

            let merge = true;
            if merge == true {
                iteration_merge(math, RHS(level+1), Sol(level), RHS(level), dirichlet_lower, dirichlet_upper, residual, residual_mask, restrict);
            } else {
                for math, x, y, res_acc, accs in iteration_bounds(math, Res(level), make_img_list2(Sol(level), (residual_mask.size_x / 2, residual_mask.size_y / 2), RHS(level), (0, 0)), dirichlet_lower, dirichlet_upper) {
                    let (sol_acc, rhs_acc) = (accs.get(0), accs.get(1));
                    residual(math, x, y, res_acc, sol_acc, rhs_acc, residual_mask);
                }

                for math, x, y, rhs_acc, accs in iteration(math, RHS(level+1), make_img_list1(Res(level), (0, 0)), nobh_center, nobh_center) {
                    let res_acc = accs.get(0);
                    restrict(math, x, y, rhs_acc, res_acc);
                }
            }

            //if level == 0 { print_string("L2 norm: "); print_f32(l2norm(Res(level))); print_char('\n'); }

            init_zero(bitcast[&mut[f32]](Tmp(level+1).buf.data), Tmp(level+1).stride, Tmp(level+1).height);
            vcycle_dsl_intern(level+1);

            // use iteration space of SolC, compute 4x elements
            for math, x, y, solc_acc, accs in iteration(math, Sol(level+1), make_img_list1(Sol(level), (0, 0)), nobh_center, nobh_center) {
                let solf_acc = accs.get(0);
                interpolate(math, x, y, solf_acc, solc_acc);
            }

            // post-smooth
            for i in unroll(0, ssteps) {
                if i>0 { let tmp = Sol(level); Sol(level) = Tmp(level); Tmp(level) = tmp; }
                for math, x, y, sol_acc, accs in iteration_bounds(math, Sol(level), make_img_list2(Tmp(level), (solver_mask.size_x / 2, solver_mask.size_y / 2), RHS(level), (0, 0)), dirichlet_lower, dirichlet_upper) {
                    let (tmp_acc, rhs_acc) = (accs.get(0), accs.get(1));
                    solver(math, x, y, sol_acc, tmp_acc, rhs_acc, solver_mask);
                }
            }
        }
    }
    for i in unroll(0, vsteps) {
        vcycle_dsl_intern(0);
    }

    let result = Sol(0);

    for level in unroll(0, levels) {
        if level != 0 {
            release(RHS(level).buf);
            release(Sol(level).buf);
        }
        release(Res(level).buf);
        release(Tmp(level).buf);
    }

    runtime_release(0, bitcast[&[i8]](RHS));
    runtime_release(0, bitcast[&[i8]](Sol));
    runtime_release(0, bitcast[&[i8]](Tmp));
    runtime_release(0, bitcast[&[i8]](Res));

    result
}


extern
fn vcycle(img_data: &[f32], out_data: &[f32], width: i32, height: i32) -> () {
    let img = Img { buf : Buffer { data : bitcast[&[i8]](img_data), size : (width * height) as i64 * sizeof[f32](), device : 0 }, width : width, height : height, stride : width };
    let out = Img { buf : Buffer { data : bitcast[&[i8]](out_data), size : (width * height) as i64 * sizeof[f32](), device : 0 }, width : width, height : height, stride : width };
    let RHS = create_img(width, height, alloc_cpu);

    deriv2D(RHS, img);

    let levels = 3;
    let vsteps = 1;
    let ssteps = 2;

    let result = vcycle_dsl(RHS, levels, vsteps, ssteps, jacobi_solver, jacobi_mask, residual_fun, residual_mask, restrict_fun, interpolate_fun);
    //let result = vcycle_reference(RHS, levels, vsteps, ssteps);
    print_total_timing();

    for y in range(0, out.height) {
        for x in range(0, out.width) {
            let out_acc = get_acc(out,    @|idx, val| { bitcast[&mut[f32]](out.buf.data)(idx) = val },    @|idx| bitcast[&[f32]](out.buf.data)(idx));
            let res_acc = get_acc(result, @|idx, val| { bitcast[&mut[f32]](result.buf.data)(idx) = val }, @|idx| bitcast[&[f32]](result.buf.data)(idx));
            out_acc.write(x, y, res_acc.read(x, y));
        }
    }

    release(result.buf);
    release(RHS.buf);
}
