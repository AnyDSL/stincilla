type pixel_t = f32;

#[export]
fn run_halide(data: &mut[pixel_t], width: i32, height: i32) -> () {
    let use_cuda = false;

    let img = Img { width = width, height = height, data = data };
    let out = Img { width = width, height = height, data = runtime_alloc(0, (width * height) as i64 * sizeof[pixel_t]()) as &[pixel_t] };

    // scheduled root | scheduled together after
    //         -- ix -|-- ixx -- sxx -
    //       /         \              \
    // in --            > ixy -- sxy --> hc -- out
    //       \         /              /
    //         -- iy -|-- iyy -- syy -

    let i_x = stencil(|read: Read, x, y| {
        let read = read(0);
        - 1:f32 / 12:f32 * read(x-1, y-1) + 1:f32 / 12:f32 * read(x+1, y-1)
        - 2:f32 / 12:f32 * read(x-1, y  ) + 2:f32 / 12:f32 * read(x+1, y  )
        - 1:f32 / 12:f32 * read(x-1, y+1) + 1:f32 / 12:f32 * read(x+1, y+1) }, extents(1, 1), 1);
    let i_y = stencil(|read: Read, x, y| {
        let read = read(0);
        - 1:f32 / 12:f32 * read(x-1, y-1) - 2:f32 / 12:f32 * read(x, y-1) - 1:f32 / 12:f32 * read(x+1, y-1)
        + 1:f32 / 12:f32 * read(x-1, y+1) + 2:f32 / 12:f32 * read(x, y+1) + 1:f32 / 12:f32 * read(x+1, y+1) }, extents(1, 1), 1);

    let multiply = @|i: i32, j: i32| @|read: Read, x: i32, y: i32| read(i)(x, y) * read(j)(x, y);
    let i_xx = multiply(0, 0);
    let i_yy = multiply(1, 1);
    let i_xy = multiply(0, 1);

    let sum = @|op: StencilOp| @|r: Read, x: i32, y: i32| {
        op(r, x-1, y-1) + op(r, x-1, y) + op(r, x-1, y+1) +
        op(r, x,   y-1) + op(r, x,   y) + op(r, x,   y+1) +
        op(r, x+1, y-1) + op(r, x+1, y) + op(r, x+1, y+1) };
    let s_xx: StencilOp = sum(i_xx);
    let s_yy = sum(i_yy);
    let s_xy = sum(i_xy);

    let det   = @|r: Read, x: i32, y: i32| { s_xx(r, x, y) * s_yy(r, x, y) - s_xy(r, x, y) * s_xy(r, x, y) };
    let trace = @|r: Read, x: i32, y: i32| { s_xx(r, x, y) + s_yy(r, x, y) };

    // let harris = stencil(|r, x, y| { det(r, x, y) - 0.04f * trace(r, x, y) * trace(r, x, y) }, extents(1, 1), 2);
    let harris = stencil(|r, x, y| { let trace = trace(r, x, y); det(r, x, y) - 0.04:f32 * trace * trace }, extents(1, 1), 2);
    let harris_all = stencil(|r, x, y| { harris.op(@|i| @|x, y| { match i { 0 => i_x.op(r, x, y), _ => i_y.op(r, x, y) }}, x, y) }, extents(1, 1), 2);

    let vec_x = |s: Stencil| combine_xy(vec(8), range, s);
    let tile_schedule = produce_roots(@|i| match i { 0 => @vec_x(i_x), _ => @vec_x(i_y) }, @vec_x(harris));
    let (tile_width, tile_height) = (128, 128);
    let tile = tile(tile_width, tile_height, tile_schedule, par(0));
    // let tile = tile(tile_width, tile_height, tile_schedule, range);
    // let tile = tile_schedule;
    // let tile = vec_x(harris_all);

    // --- which boundary handling to use ---
    // let boundary = boundary_const(0);
    // let boundary = boundary_mirror();
    let boundary = boundary_clamp();

    // --- bake everything together with boundary handling ---
    let schedule_cpu = handle_boundaries(boundary(img), tile_width, tile_height, tile, tile);
    // let schedule_cpu = dummy_boundaries(boundary(img), 0, 0, tile);

    let tile_width_cuda = 14; let tile_height_cuda = 14;
    let schedule_cuda = tile_cuda_ats(tile_width_cuda, tile_height_cuda, @|i| match i { 0 => i_x, _ => i_y }, harris);

    if use_cuda {
        let img_cuda = Img { width = width, height = height, data = alloc_cuda(cuda_dev, (width * height) as i64 * sizeof[pixel_t]()).data as &[pixel_t] };
        let out_cuda = Img { width = width, height = height, data = alloc_cuda(cuda_dev, (width * height) as i64 * sizeof[pixel_t]()).data as &[pixel_t] };
        runtime_copy(runtime_device(0, 0), img.data as &[i8], 0, runtime_device(1, cuda_dev), img_cuda.data as &mut [i8], 0, (width * height) as i64 * sizeof[pixel_t]());

        let schedule_cuda = handle_boundaries(boundary(img_cuda), tile_width_cuda, tile_height_cuda, schedule_cuda, schedule_cuda);
        //let schedule_cuda = dummy_boundaries(boundary(img_cuda), tile_width_cuda, tile_height_cuda, schedule_cuda);

        for benchmark_cuda() {
            compute(img_cuda, out_cuda, schedule_cuda);
        }

        runtime_copy(runtime_device(1, cuda_dev), out_cuda.data as &[i8], 0, runtime_device(0, 0), out.data as &mut [i8], 0, (width * height) as i64 * sizeof[pixel_t]());
        runtime_release(runtime_device(1, cuda_dev), img_cuda.data as &[i8]);
        runtime_release(runtime_device(1, cuda_dev), out_cuda.data as &[i8]);
    } else {
        for benchmark_cpu() {
            compute(img, out, schedule_cpu);
        }
    }

    print_total_timing();

    for y in range(0, height) {
        for x in range(0, width) {
            data(y * width + x) = out.data(y * width + x);
        }
    }

    runtime_release(0, out.data as &[i8]);
}
