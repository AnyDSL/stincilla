type pixel_t = f32;

extern
fn run_halide(data: &mut[pixel_t], width: i32, height: i32) -> () {
    let use_cuda = false;

    let img = Img { width : width, height : height, data : data };
    let out = Img { width : width, height : height, data : ~[width*height:pixel_t] };

    // scheduled root | scheduled together after
    //         -- ix -|-- ixx -- sxx -
    //       /         \              \
    // in --            > ixy -- sxy --> hc -- out
    //       \         /              /
    //         -- iy -|-- iyy -- syy -

    let i_x = stencil(@|read: Read, x, y| {
        let read = read(0);
        - 1.0f / 12.0f * read(x-1, y-1) + 1.0f / 12.0f * read(x+1, y-1)
        - 2.0f / 12.0f * read(x-1, y  ) + 2.0f / 12.0f * read(x+1, y  )
        - 1.0f / 12.0f * read(x-1, y+1) + 1.0f / 12.0f * read(x+1, y+1)}, extents(1, 1), 1);
    let i_y = stencil(@|read: Read, x, y| {
        let read = read(0);
        - 1.0f / 12.0f * read(x-1, y-1) - 2.0f / 12.0f * read(x, y-1) - 1.0f / 12.0f * read(x+1, y-1)
        + 1.0f / 12.0f * read(x-1, y+1) + 2.0f / 12.0f * read(x, y+1) + 1.0f / 12.0f * read(x+1, y+1)}, extents(1, 1), 1);

    let multiply = @|i, j| @|read: Read, x, y| read(i)(x, y) * read(j)(x, y);
    let i_xx = multiply(0, 0);
    let i_yy = multiply(1, 1);
    let i_xy = multiply(0, 1);

    let sum = @|op| @|r: Read, x:i32, y:i32| {
        op(r, x-1, y-1) + op(r, x-1, y) + op(r, x-1, y+1) +
        op(r, x,   y-1) + op(r, x,   y) + op(r, x,   y+1) +
        op(r, x+1, y-1) + op(r, x+1, y) + op(r, x+1, y+1)};
    let s_xx: StencilOp = sum(i_xx);
    let s_yy = sum(i_yy);
    let s_xy = sum(i_xy);

    let det = @|r: Read, x:i32, y:i32| { s_xx(r, x, y) * s_yy(r, x, y) - s_xy(r, x, y) * s_xy(r, x, y) };
    let trace = @|r: Read, x:i32, y:i32| { s_xx(r, x, y) + s_yy(r, x, y) };

    // let harris = stencil(|r, x, y| { det(r, x, y) - 0.04f * trace(r, x, y) * trace(r, x, y) },
    //                      extents(1, 1), 2);
    let harris = stencil(@|r, x, y| { let traced = trace(r, x, y); det(r, x, y) - 0.04f * traced * traced },
                         extents(1, 1), 2);

    let harris_all = stencil(@|r, x, y| { harris.op(@|i| @|x, y| { match i { 0 => i_x.op(r, x, y), _ => i_y.op(r, x, y) }}, x, y) },
                             extents(1, 1), 2);
    // TODO: vectorization leads to double-free
    //let vec_length = 8;
    let vec_length = 1;
    let vec_x = @|s: Stencil| combine_xy(vec(vec_length), range, s);
    let i_x_schedule = combine_xy(vec(vec_length), range, i_x);
    let i_y_schedule = combine_xy(vec(vec_length), range, i_y);
    let harris_schedule = combine_xy(vec(vec_length), range, harris);
    let tile_schedule = produce_roots(|i| match i { 0 => i_x_schedule, _ => i_y_schedule }, harris_schedule);
    // TODO: PE takes forever for the schedule below
    // let tile_schedule = produce_roots(|i| match i { 0 => vec_x(i_x), _ => vec_x(i_y) }, vec_x(harris));
    let tile_width = 128; let tile_height = 128;
    let tile = tile(tile_width, tile_height, tile_schedule, par(0));
    // let tile = tile(tile_width, tile_height, tile_schedule, range);
    // let tile = tile_schedule;
    // let tile = vec_x(harris_all);

    // --- which boundary handling to use ---
    // let boundary = boundary_const(0);
    // let boundary = boundary_mirror();
    let boundary = boundary_clamp();

    // --- bake everything together with boundary handling ---
    let schedule_cpu = handle_boundaries(boundary(img), tile_width, tile_height, tile, tile);
    // let schedule_cpu = middle_schedule;

    if use_cuda {
        ;
    } else {
     with benchmark_cpu() {
         compute(img, out, schedule_cpu);
     }
    }

    print_total_timing();

    for y in range(0, height) {
        for x in range(0, width) {
            data(y * width + x) = out.data(y * width + x);
        }
    }
}
