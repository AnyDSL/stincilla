type Read = fn(i32, i32) -> i32;
type BinOp = fn(i32, i32) -> i32;

type Loop = fn(i32, i32, fn(i32) -> ()) -> ();
type Loop_xy = fn(i32, i32, i32, i32, fn(i32, i32) -> ()) -> ();

struct Img {
    width  : i32,
    height : i32,
    data : &[i32]
}

fn @clip(i: i32, a: i32, b: i32) -> i32 { min(max(i, a), b) }
fn @access(img: Img, x: i32, y: i32) -> i32 { img.data(clip(y, 0, img.height-1) * img.width + clip(x, 0, img.width-1)) }

static cuda_dev = 0;
fn @benchmark_cuda(body: fn() -> ()) -> () { total_kernel_timing += benchmark(get_kernel_time, iter_acc, body, || synchronize_cuda(cuda_dev)) }

fn combine_xy(loop_x: Loop, loop_y: Loop) -> Loop_xy {
    |x_lower, y_lower, x_upper, y_upper, body: fn(i32, i32)->()|
        loop_y(y_lower, y_upper, |y|
            loop_x(x_lower, x_upper, |x|
                body(x, y)))
}

fn tile(tile_x: i32, tile_y: i32, loop_x: Loop, loop_y: Loop) -> Loop_xy {
    |x_lower, y_lower, x_upper, y_upper, body|
        loop_y(0, (y_upper - y_lower) / tile_y, |ly|
            range(ly * tile_y + y_lower, (ly + 1) * tile_y + y_lower, |ry|
                range(0, (x_upper - x_lower) / tile_x, |rx|
                    loop_x(rx * tile_x + x_lower, (rx + 1) * tile_x + x_lower, |lx|
                        body(lx, ry)))))
}

fn tile_cuda(tile_x: i32, tile_y: i32) -> Loop_xy {
    |x_lower, y_lower, x_upper, y_upper, body: fn(i32, i32)->()| {
        let grid  = (x_upper - x_lower, y_upper - y_lower, 1);
        let block = (tile_x, tile_y, 1);
        cuda(cuda_dev, grid, block, || {
            let x = cuda_threadIdx_x() + cuda_blockDim_x() * cuda_blockIdx_x();
            let y = cuda_threadIdx_y() + cuda_blockDim_y() * cuda_blockIdx_y();
            body(x, y)
        });
        synchronize_cuda(cuda_dev)
    }
}

fn vec(vector_length: i32) -> Loop {
    |lower, upper, body| range_step(lower, upper, vector_length, |i| vectorize(vector_length, |j| body(i + j)))
}

fn unr(factor: i32) -> Loop {
    |lower, upper, body| range_step(lower, upper, factor, |x| unroll(0, factor, |xu| body(x + xu)))
}

fn par(num_threads: i32) -> Loop {
    |lower, upper, body| parallel(num_threads, lower, upper, body)
}


// compute

fn compute(out: Img, loop: Loop_xy, f: BinOp) -> BinOp {
    let width  = out.width;
    let height = out.height;
    let data   = bitcast[&mut[i32]](out.data);

    for x, y in loop(0, 0, width, height) {
        data(y * width + x) = f(x, y);
    }
    |x, y| data(y * width + x)
}


#[export]
fn run_halide(data: &mut[i32], width: i32, height: i32) -> () {
    let img = Img { width = width, height = height, data = data };
    let out = Img { width = width, height = height, data = runtime_alloc(0, width * height * sizeof[i32]()) };

    let input  = |x, y| access(img, x, y);
    let blur_x = |x, y| ( input(x-1, y) +  input(x, y) +  input(x+1, y)) / 3;
    let blur_y = |x, y| (blur_x(x, y-1) + blur_x(x, y) + blur_x(x, y+1)) / 3;

    //let schedule_cpu = combine_xy(range, range);
    //let schedule_cpu = combine_xy(unr(8), range);
    //let schedule_cpu = combine_xy(vec(8), range);

    //let schedule_cpu = tile(512, 32, range, range);
    //let schedule_cpu = tile(512, 32, range, par(0));
    let schedule_cpu  = tile(512, 32, vec(8), par(0));
    let schedule_cuda = tile_cuda(32, 4);

    let use_cuda = false;

    if use_cuda {
        for benchmark_cuda() {
            compute(out, schedule_cuda, blur_y);
        }
    } else {
        for benchmark_cpu() {
            compute(out, schedule_cpu, blur_y);
        }
    }
    print_total_timing();

    for y in range(0, height) {
        for x in range(0, width) {
            data(y * width + x) = out.data(y * width + x);
        }
    }
}
