/*
 * Harris Corner
 *
 * A Combined Corner and Edge Detector
 * Chris Harris and Mike Stephens - Alvey Vision Conference, 1988
 *
 */

extern
fn harris_corner(img_data: &[f32], out_data: &mut[f32], width: i32, height: i32) -> () {
    let input  = Img { buf : Buffer { device : 0, data : bitcast[&[i8]](img_data) }, width : width, height : height, stride : width };
    let harris = create_img(width, height, alloc_cpu);
    let dx     = create_img(width, height, alloc_cpu);
    let dy     = create_img(width, height, alloc_cpu);
    let dxx    = create_img(width, height, alloc_cpu);
    let dxy    = create_img(width, height, alloc_cpu);
    let dyy    = create_img(width, height, alloc_cpu);
    let gxx    = create_img(width, height, alloc_cpu);
    let gxy    = create_img(width, height, alloc_cpu);
    let gyy    = create_img(width, height, alloc_cpu);

    // compute the first derivative using the Sobel operator
    let mdx = get_mask3([[ -1.0f,  0.0f,  1.0f ],
                         [ -2.0f,  0.0f,  2.0f ],
                         [ -1.0f,  0.0f,  1.0f ]]);
    let mdy = get_mask3([[ -1.0f, -2.0f, -1.0f ],
                         [  0.0f,  0.0f,  0.0f ],
                         [  1.0f,  2.0f,  1.0f ]]);

    let lower = clamp_lower;
    let upper = clamp_upper;
    let iteration_fun = iteration;

    for math, x, y, out, arrs in iteration_fun(math, dx, make_img_list1(input, (mdx.size_x / 2, mdx.size_y / 2)), lower, upper) {
        out.write(x, y, apply_stencil(x, y, arrs.get(0), mdx));
    }
    for math, x, y, out, arrs in iteration_fun(math, dy, make_img_list1(input, (mdy.size_x / 2, mdy.size_y / 2)), lower, upper) {
        out.write(x, y, apply_stencil(x, y, arrs.get(0), mdy));
    }


    // compute dxx, dyy, dxy
    for math, x, y, out, arrs in iteration_fun(math, dxx, make_img_list1(dx, (0, 0)), lower, upper) {
        let dx = arrs.get(0);
        out.write(x, y, dx.read(x, y) * dx.read(x, y));
    }
    for math, x, y, out, arrs in iteration_fun(math, dyy, make_img_list1(dy, (0, 0)), lower, upper) {
        let dy = arrs.get(0);
        out.write(x, y, dy.read(x, y) * dy.read(x, y));
    }
    for math, x, y, out, arrs in iteration_fun(math, dxy, make_img_list2(dx, (0, 0), dy, (0, 0)), lower, upper) {
        let (dx, dy) = (arrs.get(0), arrs.get(1));
        out.write(x, y, dx.read(x, y) * dy.read(x, y));
    }


    // compute gxx, gyy, gxy using Gaussian blur
    let mg = get_mask3([[ 0.057118f, 0.124758f, 0.057118f ],
                        [ 0.124758f, 0.272496f, 0.124758f ],
                        [ 0.057118f, 0.124758f, 0.057118f ]]);

    for math, x, y, out, arrs in iteration_fun(math, gxx, make_img_list1(dxx, (mg.size_x / 2, mg.size_y / 2)), lower, upper) {
        out.write(x, y, apply_stencil(x, y, arrs.get(0), mg));
    }
    for math, x, y, out, arrs in iteration_fun(math, gyy, make_img_list1(dyy, (mg.size_x / 2, mg.size_y / 2)), lower, upper) {
        out.write(x, y, apply_stencil(x, y, arrs.get(0), mg));
    }
    for math, x, y, out, arrs in iteration_fun(math, gxy, make_img_list1(dxy, (mg.size_x / 2, mg.size_y / 2)), lower, upper) {
        out.write(x, y, apply_stencil(x, y, arrs.get(0), mg));
    }


    // compute score for Harris corner
    for math, x, y, out, arrs in iteration_fun(math, harris, make_img_list3(gxx, (0, 0), gyy, (0, 0), gxy, (0, 0)), lower, upper) {
        let (gxx_acc, gyy_acc, gxy_acc) = (arrs.get(0), arrs.get(1), arrs.get(2));
        let gxx     = gxx_acc.read(x, y);
        let gyy     = gyy_acc.read(x, y);
        let gxy     = gxy_acc.read(x, y);
        let det     = gxx * gyy - gxy * gxy;
        let trace   = gxx + gyy;
        out.write(x, y, det - 0.04f * trace * trace);
    }

    print_total_timing();


    // post-processing: mark corners
    let threshold = 100000.0f;
    for y in range(0, height) {
        for x in range(0, width) {
            out_data(y*width + x) = img_data(y*width + x);
        }
    }
    for y in range(0, height) {
        for x in range(0, width) {
            let harris_acc = get_acc(harris, |idx, val| { bitcast[&mut[f32]](harris.buf.data)(idx) = val }, |idx| bitcast[&[f32]](harris.buf.data)(idx));
            if harris_acc.read(x, y) > threshold {
                for i in range(-5, 5+1) {
                    if x+i >= 0 && x+i < width {
                        out_data(y*width + x + i) = 255f;
                    }
                }
                for i in range(-5, 5+1) {
                    if y+i >= 0 && y+i < height {
                        out_data((y + i)*width + x) = 255f;
                    }
                }
            }
        }
    }

    release(harris.buf);
    release(dx.buf);
    release(dy.buf);
    release(dxx.buf);
    release(dxy.buf);
    release(dyy.buf);
    release(gxx.buf);
    release(gxy.buf);
    release(gyy.buf);
}
