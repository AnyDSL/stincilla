/*
 * Harris Corner
 *
 * A Combined Corner and Edge Detector
 * Chris Harris and Mike Stephens - Alvey Vision Conference, 1988
 *
 */

fn apply_stencil(x: i32, y: i32, acc: Acc, mask: Mask) -> f32 {
    let mut sum = 0.0f;
    let half_range_y = mask.size_y / 2;
    let half_range_x = mask.size_x / 2;

    for j in range(-half_range_y, half_range_y+1) {
        for i in range(-half_range_x, half_range_x+1) {
            let stencil_val = mask.data(j + half_range_y, i + half_range_x);
            if stencil_val != 0.0f {
                sum += acc.read(x + i, y + j) * stencil_val;
            } else {
                // additional logic for empty stencil value
            }
        }
    }

    sum
}


extern
fn harris_corner(img_data: &[f32], out_data: &mut[f32], width: i32, height: i32) -> () {
    let input  = Img { buf : Buffer { device : 0, data : bitcast[&[i8]](img_data) }, width : width, height : height, stride : width };
    let harris = Img { buf : alloc_cpu(width * height * sizeof[f32]()), width : width, height : height, stride : width };
    let dx     = Img { buf : alloc_cpu(width * height * sizeof[f32]()), width : width, height : height, stride : width };
    let dy     = Img { buf : alloc_cpu(width * height * sizeof[f32]()), width : width, height : height, stride : width };
    let dxx    = Img { buf : alloc_cpu(width * height * sizeof[f32]()), width : width, height : height, stride : width };
    let dxy    = Img { buf : alloc_cpu(width * height * sizeof[f32]()), width : width, height : height, stride : width };
    let dyy    = Img { buf : alloc_cpu(width * height * sizeof[f32]()), width : width, height : height, stride : width };
    let gxx    = Img { buf : alloc_cpu(width * height * sizeof[f32]()), width : width, height : height, stride : width };
    let gxy    = Img { buf : alloc_cpu(width * height * sizeof[f32]()), width : width, height : height, stride : width };
    let gyy    = Img { buf : alloc_cpu(width * height * sizeof[f32]()), width : width, height : height, stride : width };

    // compute the first derivative using the Sobel operator
    let mdx = @get_mask3([[ -1.0f,  0.0f,  1.0f ],
                          [ -2.0f,  0.0f,  2.0f ],
                          [ -1.0f,  0.0f,  1.0f ]]);
    let mdy = @get_mask3([[ -1.0f, -2.0f, -1.0f ],
                          [  0.0f,  0.0f,  0.0f ],
                          [  1.0f,  2.0f,  1.0f ]]);

    let lower = clamp_lower;
    let upper = clamp_upper;
    let iteration_fun = iteration;

    for x, y, out, arr, mask in @iteration_fun(dx, input, mdx, lower, upper) {
        out.write(x, y, apply_stencil(x, y, arr, mask));
    }
    for x, y, out, arr, mask in @iteration_fun(dy, input, mdy, lower, upper) {
        out.write(x, y, apply_stencil(x, y, arr, mask));
    }


    // compute dxx, dyy, dxy
    let dx_dev = @get_device_copy(dx);
    let dy_dev = @get_device_copy(dy);
    for x, y, out in @iteration_point(dxx) {
        let dx = get_acc(dx_dev);
        out.write(x, y, dx.read(x, y) * dx.read(x, y));
    }
    for x, y, out in @iteration_point(dyy) {
        let dy = get_acc(dy_dev);
        out.write(x, y, dy.read(x, y) * dy.read(x, y));
    }
    for x, y, out in @iteration_point(dxy) {
        let dx = get_acc(dx_dev);
        let dy = get_acc(dy_dev);
        out.write(x, y, dx.read(x, y) * dy.read(x, y));
    }
    release_device_copy(dx_dev);
    release_device_copy(dy_dev);


    // compute gxx, gyy, gxy using Gaussian blur
    let mg = @get_mask3([[ 0.057118f, 0.124758f, 0.057118f ],
                         [ 0.124758f, 0.272496f, 0.124758f ],
                         [ 0.057118f, 0.124758f, 0.057118f ]]);

    for x, y, out, arr, mask in @iteration_fun(gxx, dxx, mg, lower, upper) {
        out.write(x, y, apply_stencil(x, y, arr, mask));
    }
    for x, y, out, arr, mask in @iteration_fun(gyy, dyy, mg, lower, upper) {
        out.write(x, y, apply_stencil(x, y, arr, mask));
    }
    for x, y, out, arr, mask in @iteration_fun(gxy, dxy, mg, lower, upper) {
        out.write(x, y, apply_stencil(x, y, arr, mask));
    }


    // compute score for Harris corner
    let gxx_dev = @get_device_copy(gxx);
    let gyy_dev = @get_device_copy(gyy);
    let gxy_dev = @get_device_copy(gxy);
    for x, y, out in @iteration_point(harris) {
        let gxx_acc = get_acc(gxx_dev);
        let gyy_acc = get_acc(gyy_dev);
        let gxy_acc = get_acc(gxy_dev);
        let gxx     = gxx_acc.read(x, y);
        let gyy     = gyy_acc.read(x, y);
        let gxy     = gxy_acc.read(x, y);
        let det     = gxx * gyy - gxy * gxy;
        let trace   = gxx + gyy;
        out.write(x, y, det - 0.04f * trace * trace);
    }
    release_device_copy(gxx_dev);
    release_device_copy(gyy_dev);
    release_device_copy(gxy_dev);

    print_total_timing();


    // post-processing: mark corners
    let threshold = 100000.0f;
    for y in $range(0, height) {
        for x in range(0, width) @{
            out_data(y*width + x) = img_data(y*width + x);
        }
    }
    for y in $range(0, height) {
        for x in range(0, width) @{
            if bitcast[&[f32]](harris.buf.data)(y*width + x) > threshold {
                for i in range(-5, 5+1) {
                    if x+i >= 0 && x+i < width {
                        out_data(y*width + x + i) = 255f;
                    }
                }
                for i in range(-5, 5+1) {
                    if y+i >= 0 && y+i < height {
                        out_data((y + i)*width + x) = 255f;
                    }
                }
            }
        }
    }

    release(harris.buf);
    release(dx.buf);
    release(dy.buf);
    release(dxx.buf);
    release(dxy.buf);
    release(dyy.buf);
    release(gxx.buf);
    release(gxy.buf);
    release(gyy.buf);
}
