fn @iteration(math: Intrinsics, out: Buffer, width: i32, height: i32,
              body: fn(Intrinsics, i32, i32, fn(u8, u8, u8) -> (), fn() -> f64) -> ()
             ) -> () {
    let acc   = accelerator(device_id);
    let grid  = (width, height, 1);
    let block = (32, 4, 1);

    // initialize seed on the CPU
    random_seed(get_micro_time() as u32);
    let seed_buf = alloc_cpu(width * height * sizeof[u64]());
    let seed = bitcast[&mut[u64]](seed_buf.data);
    for i in range(0, width * height) {
        seed(i) = random_val_u64();
    }

    let seed_gpu = acc.alloc(width * height * sizeof[u64]());
    let out_gpu  = acc.alloc(width * height * 3 * sizeof[u8]());
    copy(seed_buf, seed_gpu);

    for benchmark_acc(acc) {
        for tid, bid, bdim, gdim, gid in acc.exec(grid, block) {
            let (gidx,  gidy,  _) = gid;
            let gid_x = gidx();
            let gid_y = gidy();
            let seed  = bitcast[&[1][u64]](seed_gpu.data);
            let mut state = seed(gid_y * width + gid_x);
            fn @rand() -> f64 {
                let (r, s) = rnd_f64(state);
                state = s;
                r
            }
            fn @out_fun(r: u8, g: u8, b: u8) -> () {
                let out = bitcast[&mut[1][u8]](out_gpu.data);
                out(3 * (gid_y * width + gid_x) + 0) = r;
                out(3 * (gid_y * width + gid_x) + 1) = g;
                out(3 * (gid_y * width + gid_x) + 2) = b;
            }
            body(math, gid_x, gid_y, out_fun, rand);
        }
    }

    copy(out_gpu, out);
    release(seed_buf);
    release(out_gpu);
}
