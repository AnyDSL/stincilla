extern "C" {
    fn mrand48() -> i64;
    fn srand48(i64) -> ();
}

// MWC64X Random Number Generator
// http://cas.ee.ic.ac.uk/people/dt10/research/rngs-gpu-mwc64x.html
fn rnd_u32(state: u64) -> (u32, u64) {
    let hi = state >> 32u64;
    let lo = state & 0xFFFFFFFFu64;
    ((lo as u32) ^ (hi as u32), lo * 4294883355u64 + hi)
}

fn rnd_f64(state: u64) -> (f64, u64) {
    let (r, state) = rnd_u32(state);
    let k = 1.0 / (0xFFFFFFFFu64 as f64);
    ((r as f64) * k, state)
}

fn iteration(math: Intrinsics, out: Buffer, width: i32, height: i32,
             body: fn(Intrinsics, i32, i32, fn(u8, u8, u8) -> (), fn() -> f64) -> ()
            ) -> () {
    let grid  = (width, height, 1);
    let block = (32, 4, 1);

    // initialize seed on the CPU using mrand48()
    srand48(get_micro_time());
    let seed_buf = alloc_cpu(width * height * sizeof[u64]());
    let seed = bitcast[&mut[u64]](seed_buf.data);
    for i in $range(0, width * height) {
        seed(i) = mrand48() as u64;
    }

    let seed_gpu = acc.alloc(acc.dev(), width * height * sizeof[u64]());
    let out_gpu  = acc.alloc(acc.dev(), width * height * 3 * sizeof[u8]());
    copy(seed_buf, seed_gpu, width * height * sizeof[u64]());

    for benchmark_acc() {
        with acc.exec(acc.dev(), grid, block) @{
            let seed = bitcast[&[1][u64]](seed_gpu.data);
            let mut state = seed(acc.gidy()*width + acc.gidx());
            fn rand() -> f64 {
                let (r, s) = rnd_f64(state);
                state = s;
                r
            }
            fn out_fun(r: u8, g: u8, b: u8) -> () {
                let out = bitcast[&mut[1][u8]](out_gpu.data);
                out(3 * (acc.gidy() * width + acc.gidx()) + 0) = r;
                out(3 * (acc.gidy() * width + acc.gidx()) + 1) = g;
                out(3 * (acc.gidy() * width + acc.gidx()) + 2) = b;
            }
            body(math, acc.gidx(), acc.gidy(), out_fun, rand);
        }
    }

    copy(out_gpu, out, width * height * 3 * sizeof[u8]());
    release(seed_buf);
    release(out_gpu);
}
