fn @iteration(body: fn(Intrinsics, i32, i32, fn(u8, u8, u8) -> (), fn() -> f64) -> ()) = @|math: Intrinsics, out: Buffer, width: i32, height: i32| {
    random_seed(get_micro_time() as u32);

    for benchmark_cpu() {
        for y in outer_loop(0, height) {
            let mut state = random_val_u64();
            fn @rand() -> f64 {
                let (r, s) = rnd_f64(state);
                state = s;
                r
            }
            for x in range(0, width) {
                fn @out_fun(r: u8, g: u8, b: u8) -> () {
                    let out = bitcast[&mut[u8]](out.data);
                    out(3 * (y * width + x) + 0) = r;
                    out(3 * (y * width + x) + 1) = g;
                    out(3 * (y * width + x) + 2) = b;
                }
                body(math, x, y, out_fun, rand);
            }
        }
    }
};
