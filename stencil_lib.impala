type BoundaryFn   = fn(i32, i32, i32) -> BoundaryMode;
type StencilFn    = fn(Intrinsics, i32, i32, Acc, AccList) -> ();
type StencilSepFn = fn(Intrinsics, i32, i32, Acc, Acc, MaskSep, bool) -> ();
type Region       = (Boundary, Boundary);

struct RoI {
    o_x : i32,
    o_y : i32,
    width : i32,
    height : i32
}

struct Acc {
    read  : fn(i32, i32) -> pixel_t,
    write : fn(i32, i32, pixel_t) -> (),
}

struct Mask {
    data : fn(i32, i32) -> pixel_t,
    sum  : pixel_t,
    size_x : i32,
    size_y : i32,
}

struct MaskSep {
    data : fn(i32) -> pixel_t,
    sum  : pixel_t,
    size : i32,
}

enum Boundary {
    Lower, Center, Upper, Unknown
}

enum BoundaryMode {
    Index(i32),
    Const(pixel_t)
}

fn @apply_stencil(x: i32, y: i32, acc: Acc, mask: Mask) -> pixel_t {
    let mut sum = 0 as pixel_t;
    let half_range_y = mask.size_y / 2;
    let half_range_x = mask.size_x / 2;

    for j in unroll(-half_range_y, half_range_y+1) {
        for i in unroll(-half_range_x, half_range_x+1) {
            let stencil_val = mask.data(j + half_range_y, i + half_range_x);
            if stencil_val != 0 as pixel_t {
                sum += acc.read(x + i, y + j) * stencil_val;
            } else {
                // additional logic for empty stencil value
            }
        }
    }

    if mask.sum != 1 as pixel_t && mask.sum != 0 as pixel_t {
        sum /= mask.sum;
    }

    sum
}

fn @apply_stencil_sep(x: i32, y: i32, acc: Acc, mask: MaskSep, row: bool) -> pixel_t {
    let mut sum = 0 as pixel_t;
    let half_range = mask.size / 2;

    for i in unroll(-half_range, half_range+1) {
        let stencil_val = mask.data(i + half_range);
        if stencil_val != 0 as pixel_t {
            if row {
                sum += acc.read(x + i, y) * stencil_val;
            } else {
                sum += acc.read(x, y + i) * stencil_val;
            }
        } else {
            // additional logic for empty stencil value
        }
    }

    if mask.sum != 1 as pixel_t && mask.sum != 0 as pixel_t {
        sum /= mask.sum;
    }

    sum
}

// boundary handling functions
fn @get_bounds(lower: i32, upper: i32, bh_pixels: i32, boundary: Boundary) -> (i32, i32) {
    match boundary {
        Boundary::Lower  => (lower, bh_pixels),
        Boundary::Center => (bh_pixels, upper - bh_pixels),
        Boundary::Upper  => (upper - bh_pixels, upper),
        _                => undef()
    }
}
fn @get_boundary(boundary: i32) -> Boundary {
    match boundary {
        0 => Boundary::Lower,
        1 => Boundary::Center,
        2 => Boundary::Upper,
        _ => undef()
    }
}
fn @iterate_1dregion(lower: i32, upper: i32, tile_size: i32, body: fn((i32, i32), Boundary) -> ()) -> () {
    if tile_size == 0 {
        let boundary:Boundary = Boundary::Center;
        @@body((lower, upper), boundary)
    } else {
        for region in unroll(0, 3) {
            let boundary = get_boundary(region);
            let bounds   = get_bounds(lower, upper, tile_size, boundary);
            @@body(bounds, boundary)
        }
    }
}
fn @iterate_2dregion(lower: (i32, i32), upper: (i32, i32), tile_size: (i32, i32), body: fn(((i32, i32), (i32, i32)), Region) -> ()) -> () {
    for bounds_row, boundary_row in iterate_1dregion(lower(0), upper(0), tile_size(0)) {
        for bounds_col, boundary_col in iterate_1dregion(lower(1), upper(1), tile_size(1)) {
            @@body((bounds_row, bounds_col), (boundary_row, boundary_col))
        }
    }
}

fn @nobh_center (idx: i32, lower: i32, upper: i32) -> BoundaryMode { BoundaryMode::Index(idx) }
fn @clamp_lower (idx: i32, lower: i32, upper: i32) -> BoundaryMode {
    BoundaryMode::Index(if idx < lower { lower } else { idx })
}
fn @clamp_upper (idx: i32, lower: i32, upper: i32) -> BoundaryMode {
    BoundaryMode::Index(if idx >= upper { upper - 1 } else { idx })
}
fn @mirror_lower(idx: i32, lower: i32, upper: i32) -> BoundaryMode {
    BoundaryMode::Index(if idx < lower { lower + (lower - idx-1) } else { idx })
}
fn @mirror_upper(idx: i32, lower: i32, upper: i32) -> BoundaryMode {
    BoundaryMode::Index(if idx >= upper { upper - (idx+1 - upper) } else { idx })
}
fn @repeat_lower(idx: i32, lower: i32, upper: i32) -> BoundaryMode {
    BoundaryMode::Index(if idx < lower { idx + (lower + upper) } else { idx })
}
fn @repeat_upper(idx: i32, lower: i32, upper: i32) -> BoundaryMode {
    BoundaryMode::Index(if idx >= upper { idx - (lower + upper) } else { idx })
}
fn @const_lower (idx: i32, lower: i32, upper: i32, cval: pixel_t) -> BoundaryMode {
    if idx < lower { BoundaryMode::Const(cval) } else { BoundaryMode::Index(idx) }
}
fn @const_upper (idx: i32, lower: i32, upper: i32, cval: pixel_t) -> BoundaryMode {
    if idx >= upper { BoundaryMode::Const(cval) } else { BoundaryMode::Index(idx) }
}
fn @wrap_const_fun(fun: fn(i32, i32, i32, pixel_t) -> BoundaryMode, cval: pixel_t) -> BoundaryFn {
    @|idx, lower, upper| fun(idx, lower, upper, cval)
}

fn @map_boundary_mode(mode: BoundaryMode, bh_fun: fn(i32) -> BoundaryMode) -> BoundaryMode {
    match mode {
        BoundaryMode::Index(idx) => bh_fun(idx),
        BoundaryMode::Const(val) => mode
    }
}

fn @read_pixel(x: i32, y: i32, region: Region, roi: RoI, read: fn(i32, i32) -> pixel_t, bh_lower: BoundaryFn, bh_upper: BoundaryFn) -> pixel_t {
    let lower_x = roi.o_x;
    let lower_y = roi.o_y;
    let upper_x = roi.o_x + roi.width;
    let upper_y = roi.o_y + roi.height;

    let (mode_x, mode_y) = match region {
        (row, col) => {
            let mode_x = match row {
                Boundary::Lower   => bh_lower(roi.o_x + x, lower_x, upper_x),
                Boundary::Center  => BoundaryMode::Index(roi.o_x + x),
                Boundary::Upper   => bh_upper(roi.o_x + x, lower_x, upper_x),
                Boundary::Unknown => map_boundary_mode(bh_lower(roi.o_x + x, lower_x, upper_x), @|idx| bh_upper(idx, lower_x, upper_x))
            };
            let mode_y = match col {
                Boundary::Lower   => bh_lower(roi.o_y + y, lower_y, upper_y),
                Boundary::Center  => BoundaryMode::Index(roi.o_y + y),
                Boundary::Upper   => bh_upper(roi.o_y + y, lower_y, upper_y),
                Boundary::Unknown => map_boundary_mode(bh_lower(roi.o_y + y, lower_y, upper_y), @|idx| bh_upper(idx, lower_y, upper_y))
            };
            (mode_x, mode_y)
        }
    };

    match (mode_x, mode_y) {
        (BoundaryMode::Index(x), BoundaryMode::Index(y)) => read(x, y),
        (BoundaryMode::Const(c), _) => c,
        (_, BoundaryMode::Const(c)) => c,
        _ => undef()
    }
}

// &   [pixel_t] on CPU/AVX
// &[3][pixel_t] on CUDA/NVVM & OpenCL/AMDGPU
fn @get_acc_bh_memory(set_pixel: fn(i32, pixel_t) -> (), get_pixel: fn(i32) -> pixel_t, width: i32, height: i32, region: Region, bh_lower: BoundaryFn, bh_upper: BoundaryFn) -> Acc {
    get_acc_bh_offset_memory(set_pixel, get_pixel, width, height, 0, 0, region, bh_lower, bh_upper)
}
fn @get_acc_bh_offset_memory(set_pixel: fn(i32, pixel_t) -> (), get_pixel: fn(i32) -> pixel_t, width: i32, height: i32, rox: i32, roy: i32, region: Region, bh_lower: BoundaryFn, bh_upper: BoundaryFn) -> Acc {
    Acc {
        read  : @|x, y|    read_pixel(x + rox, y + roy, region, RoI { o_x : 0, o_y : 0, width : width, height : height }, @|x, y| { get_pixel(y * width + x) }, bh_lower, bh_upper),
        write : @|x, y, v| set_pixel((y + roy) * width + x + rox, v)
    }
}
fn @get_acc_memory(set_pixel: fn(i32, pixel_t) -> (), get_pixel: fn(i32) -> pixel_t, width: i32, height: i32) -> Acc {
    get_acc_offset_memory(set_pixel, get_pixel, width, height, 0, 0)
}
fn @get_acc_offset_memory(set_pixel: fn(i32, pixel_t) -> (), get_pixel: fn(i32) -> pixel_t, width: i32, height: i32, rox: i32, roy: i32) -> Acc {
    Acc {
        read  : @|x, y|    get_pixel((y + roy) * width + x + rox),
        write : @|x, y, v| set_pixel((y + roy) * width + x + rox, v)
    }
}

fn @sum_mask(size: int, data: fn(int) -> pixel_t) -> pixel_t {
    fn @sum_helper(i: int, s: pixel_t) -> pixel_t {
        if i == size { s } else { sum_helper(i + 1, s + data(i)) }
    }
    let sum = sum_helper(0, 0 as pixel_t);
    if sum == 0 as pixel_t {
        1 as pixel_t
    } else {
        sum
    }
}

fn @get_mask3(data: [[pixel_t * 3] * 3]) -> Mask {
    let data_sum = @|x| -> pixel_t { data(x % 3)(x / 3) };
    Mask {
        data : @|x, y| -> pixel_t { data(y)(x) },
        sum  : sum_mask(9, data_sum),
        size_x : 3, size_y : 3
    }
}
fn @get_mask5(data: [[pixel_t * 5] * 5]) -> Mask {
    let data_sum = @|x| -> pixel_t { data(x % 5)(x / 5) };
    Mask {
        data : @|x, y| -> pixel_t { data(y)(x) },
        sum  : sum_mask(25, data_sum),
        size_x : 5, size_y : 5
    }
}
fn @get_mask_sep3(data: [pixel_t * 3]) -> MaskSep {
    let data = @|x| -> pixel_t { data(x) };
    MaskSep {
        data : data,
        sum  : sum_mask(3, data),
        size : 3
    }
}
fn @get_mask_sep5(data: [pixel_t * 5]) -> MaskSep {
    let data = @|x| -> pixel_t { data(x) };
    MaskSep {
        data : data,
        sum  : sum_mask(5, data),
        size : 5
    }
}

// image and accessor lists

struct ImgList {
    get : fn(i32) -> Img,
    ext : fn(i32) -> (i32, i32),
    size : i32, id : i32
}

fn @img_list_empty() -> ImgList {
    ImgList {
        get : @|i| undef[Img](),
        ext : @|i| undef[(i32, i32)](),
        size : 0, id : 0
    }
}

fn @img_list_tail(img: Img, ext: (i32, i32), n: i32) -> ImgList {
    ImgList {
        get : @|i| { if i == n - 1 { img } else { undef[Img]() } },
        ext : @|i| { if i == n - 1 { ext } else { undef[(i32, i32)]() } },
        size : n, id : n
    }
}

fn @img_list_prepend(list: ImgList, img: Img, ext: (i32, i32)) -> ImgList {
    ImgList {
        get : @|i| { if i == list.id - 2 { img } else { list.get(i) } },
        ext : @|i| { if i == list.id - 2 { ext } else { list.ext(i) } },
        size : list.size, id : list.id - 1
    }
}

fn @make_img_list1(img: Img, ext: (i32, i32)) -> ImgList {
    img_list_tail(img, ext, 1)
}
fn @make_img_list2(img1: Img, ext1: (i32, i32), img2: Img, ext2: (i32, i32)) -> ImgList {
    img_list_prepend(img_list_tail(img2, ext2, 2), img1, ext1)
}
fn @make_img_list3(img1: Img, ext1: (i32, i32), img2: Img, ext2: (i32, i32), img3: Img, ext3: (i32, i32)) -> ImgList {
    img_list_prepend(img_list_prepend(img_list_tail(img3, ext3, 3), img2, ext2), img1, ext1)
}

fn @img_list_map(imgs: ImgList, body: fn(Img, (i32, i32)) -> Img) -> ImgList {
    fn @map(list: ImgList, i: i32) -> ImgList {
        if i == 0 {
            list
        } else if i == imgs.size {
            map(img_list_tail(@@body(imgs.get(i - 1), imgs.ext(i - 1)), imgs.ext(i - 1), imgs.size), i - 1)
        } else {
            map(img_list_prepend(list, @@body(imgs.get(i - 1), imgs.ext(i - 1)), imgs.ext(i - 1)), i - 1)
        }
    }

    map(img_list_empty(), imgs.size)
}

fn @img_list2acc_map(imgs: ImgList, body: fn(Img, (i32, i32)) -> Acc) -> AccList {
    fn @map(list: AccList, i: i32) -> AccList {
        if i == 0 {
            list
        } else if i == imgs.size {
            map(acc_list_tail(@@body(imgs.get(i - 1), imgs.ext(i - 1)), imgs.size), i - 1)
        } else {
            map(acc_list_prepend(list, @@body(imgs.get(i - 1), imgs.ext(i - 1))), i - 1)
        }
    }

    map(acc_list_empty(), imgs.size)
}

fn @get_max_ext(imgs: ImgList) -> (i32, i32) {
    fn @max_ext(ext: (i32, i32), i: i32) -> (i32, i32) {
        if i == 0 {
            ext
        } else {
            max_ext((max(ext(0), imgs.ext(i - 1)(0)), max(ext(1), imgs.ext(i - 1)(1))), i - 1)
        }
    }

    max_ext((0, 0), imgs.size)
}


struct AccList {
    get : fn(i32) -> Acc,
    size : i32, id : i32
}

fn @acc_list_empty() -> AccList {
    AccList {
        get : @|i| { undef[Acc]() },
        size : 0, id : 0
    }
}

fn @acc_list_tail(acc: Acc, n: i32) -> AccList {
    AccList {
        get : @|i| { if i == n - 1 { acc } else { undef[Acc]() } },
        size : n, id : n
    }
}

fn @acc_list_prepend(list: AccList, acc: Acc) -> AccList {
    AccList {
        get : @|i| { if i == list.id - 2 { acc } else { list.get(i) } },
        size : list.size, id : list.id - 1
    }
}

fn @make_acc_list1(acc: Acc) -> AccList {
    acc_list_tail(acc, 1)
}
fn @make_acc_list2(acc1: Acc, acc2: Acc) -> AccList {
    acc_list_prepend(acc_list_tail(acc2, 2), acc1)
}
fn @make_acc_list3(acc1: Acc, acc2: Acc, acc3: Acc) -> AccList {
    acc_list_prepend(acc_list_prepend(acc_list_tail(acc3, 3), acc2), acc1)
}
