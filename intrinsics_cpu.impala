static math = cpu_intrinsics;
fn is_nvvm() -> bool { false }
fn is_cuda() -> bool { false }
fn is_opencl() -> bool { false }
fn is_x86() -> bool { true }
fn is_sse() -> bool { false }
fn is_avx() -> bool { false }
fn is_avx2() -> bool { false }

fn get_vector_length() -> int { 1 }
fn get_alignment() -> int { 4 }
fn get_thread_count() -> int { 4 }

fn outer_loop(lower: int, upper: int, body: fn(int) -> ()) -> () {
    for i in parallel(@get_thread_count(), lower, upper) {
        body(i);
    }
}
fn outer_loop_step(lower: int, upper: int, step: int, body: fn(int) -> ()) -> () {
    for i in parallel(@get_thread_count(), 0, (upper-lower)/step) {
        body(i * step + lower);
    }
}
fn inner_loop(lower: int, upper: int, body: fn(int) -> ()) -> () {
    if lower < upper {
        body(lower);
        inner_loop(lower+1, upper, body, return)
    }
}
fn inner_loop_step(lower: int, upper: int, step: int, body: fn(int) -> ()) -> () {
    if lower < upper {
        body(lower);
        inner_loop_step(lower+step, upper, step, body, return)
    }
}
