fn @compute_config(range_mask: (i32, i32), coarsening_factor: i32) -> ((i32, i32, i32), (i32, i32)) {
    fn @compute_config_y (y_max: i32) -> i32 {
        if range_mask(1) > 1 { return(y_max) }
        for n in range(1, y_max+1) {
            if n * coarsening_factor >= range_mask(1) { return(n) }
        }
        y_max
    }

    let config_y_max = 4;   // must be 1 for CPU on Mac OS X
    let config_x_max = 128; // use 256 for AMD GPUs; 512 for Intel MIC

    let threads_y = compute_config_y(config_y_max);
    let threads_x = config_x_max / threads_y;

    let blocks_x = round_up(range_mask(0), threads_x) / threads_x;
    let blocks_y = round_up(range_mask(1), threads_y) / threads_y;

    ((threads_x, threads_y, 1), (blocks_x, blocks_y))
}

fn @get_device_copy(img: Img) -> Img {
    let acc = accelerator(device_id);
    let img_gpu = alloc_img(img, acc.alloc);
    copy_img(img, img_gpu);
    img_gpu
}

fn @release_device_copy(img: Img) -> () {
    release(img.buf)
}

fn @get_ldg_fn() -> fn(&[1]f32) -> f32 { if is_nvvm() { nvvm_ldg_f32 } else { cuda_ldg_f32 } }
fn @set_pixel_fn(img: Img) -> fn(i32, f32) -> () { @|idx, val| bitcast[&mut[1][f32]](img.buf.data)(idx) = val }
fn @get_pixel_fn(img: Img) -> fn(i32) -> f32 { @|idx| bitcast[&[1][f32]](img.buf.data)(idx) }
fn @get_pixel_ldg_fn(img: Img) -> fn(i32) -> f32 { if has_ldg() { @|idx| get_ldg_fn()(&bitcast[&[1][f32]](img.buf.data)(idx)) } else { get_pixel_fn(img) } }
fn @set_pixel_shared_fn(data: &mut[3][f32]) -> fn(i32, f32) -> () { @|idx, val| data(idx) = val }
fn @get_pixel_shared_fn(data: &[3][f32]) -> fn(i32) -> f32 { @|idx| data(idx) }

fn @iteration_point(math: Intrinsics, out: Img, body: fn(Intrinsics, i32, i32, Acc) -> ()) -> () {
    let acc = accelerator(device_id);
    let out_gpu = alloc_img(out, acc.alloc);

    let coarsening_factor = 1;
    let grid   = (out.width, out.height / coarsening_factor, 1);
    let block  = (128, 1, 1);

    for benchmark_acc(acc) {
        for tid, bid, bdim, gdim, gid in acc.exec(grid, block) {
            let (tidx,  tidy,  _) = tid;
            let (bidx,  bidy,  _) = bid;
            let (bdimx, bdimy, _) = bdim;
            let tid_x  = tidx();
            let tid_y  = tidy();
            let bid_x  = bidx();
            let bid_y  = bidy();
            let bdim_x = bdimx();
            let bdim_y = bdimy();
            let gid_x  = tid_x + bdim_x * bid_x;
            let gid_y  = tid_y + bdim_y * bid_y * coarsening_factor;
            let out_acc = get_acc(out_gpu, set_pixel_fn(out_gpu), get_pixel_fn(out_gpu));

            for i in unroll(0, coarsening_factor) {
                @@body(math, gid_x, gid_y + i * bdim_y, out_acc);
            }
        }
    }

    copy_img(out_gpu, out);
    release(out_gpu.buf);
}

fn @iteration(math: Intrinsics, out: Img, arr: Img, mask: Mask, bh_lower: BoundaryFn, bh_upper: BoundaryFn, body: StencilFn) -> () {
    let acc = accelerator(device_id);
    let arr_gpu = alloc_img(arr, acc.alloc);
    let out_gpu = alloc_img(out, acc.alloc);
    copy_img(arr, arr_gpu);

    let coarsening_factor = 1;
    let (block, _) = compute_config((mask.size_x / 2, mask.size_y / 2), coarsening_factor);
    let grid       = (out.width, out.height / coarsening_factor, 1);

    for benchmark_acc(acc) {
        for tid, bid, bdim, gdim, gid in acc.exec(grid, block) {
            let (tidx,  tidy,  _) = tid;
            let (bidx,  bidy,  _) = bid;
            let (bdimx, bdimy, _) = bdim;
            let tid_x  = tidx();
            let tid_y  = tidy();
            let bid_x  = bidx();
            let bid_y  = bidy();
            let bdim_x = bdimx();
            let bdim_y = bdimy();
            let gid_x  = tid_x + bdim_x * bid_x;
            let gid_y  = tid_y + bdim_y * bid_y * coarsening_factor;
            let arr_acc = get_acc_bh(arr_gpu, set_pixel_fn(arr_gpu), get_pixel_ldg_fn(arr_gpu), (Boundary::Unknown, Boundary::Unknown), bh_lower, bh_upper);
            let out_acc = get_acc(out_gpu, set_pixel_fn(out_gpu), get_pixel_fn(out_gpu));

            for i in unroll(0, coarsening_factor) {
                @@body(math, gid_x, gid_y + i * bdim_y, out_acc, arr_acc, mask);
            }
        }
    }

    copy_img(out_gpu, out);
    release(arr_gpu.buf);
    release(out_gpu.buf);
}

fn @iteration_bounds(math: Intrinsics, out: Img, arr: Img, mask: Mask, bh_lower: BoundaryFn, bh_upper: BoundaryFn, body: StencilFn) -> () {
    let acc = accelerator(device_id);
    let arr_gpu = alloc_img(arr, acc.alloc);
    let out_gpu = alloc_img(out, acc.alloc);
    copy_img(arr, arr_gpu);

    // compute the number of blocks required for boundary handling
    let coarsening_factor = 1;
    let (block, (bx, by)) = compute_config((mask.size_x / 2, mask.size_y / 2), coarsening_factor);

    // define if we want to generate one big kernel or multiple kernels
    let big_kernel = false;

    if big_kernel {
        let grid = (out.width, out.height / coarsening_factor, 1);

        for benchmark_acc(acc) {
            for tid, bid, bdim, gdim, gid in acc.exec(grid, block) {
                let (tidx,  tidy,  _) = tid;
                let (bidx,  bidy,  _) = bid;
                let (bdimx, bdimy, _) = bdim;
                let (gdimx, gdimy, _) = gdim;
                let tid_x  = tidx();
                let tid_y  = tidy();
                let bid_x  = bidx();
                let bid_y  = bidy();
                let bdim_x = bdimx();
                let bdim_y = bdimy();
                let gdim_x = gdimx();
                let gdim_y = gdimy();
                let gid_x  = tid_x + bdim_x * bid_x;
                let gid_y  = tid_y + bdim_y * bid_y * coarsening_factor;
                let out_acc = get_acc(out_gpu, set_pixel_fn(out_gpu), get_pixel_fn(out_gpu));

                if bid_x < bx && bid_y < by {                            // top-left
                    let arr_acc = get_acc_bh(arr_gpu, set_pixel_fn(arr_gpu), get_pixel_ldg_fn(arr_gpu), (Boundary::Lower, Boundary::Lower), bh_lower, bh_upper);
                    for i in unroll(0, coarsening_factor) {
                        @@body(math, gid_x, gid_y + i * bdim_y, out_acc, arr_acc, mask);
                    }
                } else if bid_x >= gdim_x - bx && bid_y < by {           // top-right
                    let arr_acc = get_acc_bh(arr_gpu, set_pixel_fn(arr_gpu), get_pixel_ldg_fn(arr_gpu), (Boundary::Upper, Boundary::Lower), bh_lower, bh_upper);
                    for i in unroll(0, coarsening_factor) {
                        @@body(math, gid_x, gid_y + i * bdim_y, out_acc, arr_acc, mask);
                    }
                } else if bid_y < by {                                   // top
                    let arr_acc = get_acc_bh(arr_gpu, set_pixel_fn(arr_gpu), get_pixel_ldg_fn(arr_gpu), (Boundary::Center, Boundary::Lower), bh_lower, bh_upper);
                    for i in unroll(0, coarsening_factor) {
                        @@body(math, gid_x, gid_y + i * bdim_y, out_acc, arr_acc, mask);
                    }
                } else if bid_y >= gdim_y - by && bid_x < bx {           // bottom-left
                    let arr_acc = get_acc_bh(arr_gpu, set_pixel_fn(arr_gpu), get_pixel_ldg_fn(arr_gpu), (Boundary::Lower, Boundary::Upper), bh_lower, bh_upper);
                    for i in unroll(0, coarsening_factor) {
                        @@body(math, gid_x, gid_y + i * bdim_y, out_acc, arr_acc, mask);
                    }
                } else if bid_y >= gdim_y - by && bid_x >= gdim_x - bx { // bottom-right
                    let arr_acc = get_acc_bh(arr_gpu, set_pixel_fn(arr_gpu), get_pixel_ldg_fn(arr_gpu), (Boundary::Upper, Boundary::Upper), bh_lower, bh_upper);
                    for i in unroll(0, coarsening_factor) {
                        @@body(math, gid_x, gid_y + i * bdim_y, out_acc, arr_acc, mask);
                    }
                } else if bid_y >= gdim_y - by {                         // bottom
                    let arr_acc = get_acc_bh(arr_gpu, set_pixel_fn(arr_gpu), get_pixel_ldg_fn(arr_gpu), (Boundary::Center, Boundary::Upper), bh_lower, bh_upper);
                    for i in unroll(0, coarsening_factor) {
                        @@body(math, gid_x, gid_y + i * bdim_y, out_acc, arr_acc, mask);
                    }
                } else if bid_x >= gdim_x - bx {                         // right
                    let arr_acc = get_acc_bh(arr_gpu, set_pixel_fn(arr_gpu), get_pixel_ldg_fn(arr_gpu), (Boundary::Upper, Boundary::Center), bh_lower, bh_upper);
                    for i in unroll(0, coarsening_factor) {
                        @@body(math, gid_x, gid_y + i * bdim_y, out_acc, arr_acc, mask);
                    }
                } else if bid_x < bx {                                   // left
                    let arr_acc = get_acc_bh(arr_gpu, set_pixel_fn(arr_gpu), get_pixel_ldg_fn(arr_gpu), (Boundary::Lower, Boundary::Center), bh_lower, bh_upper);
                    for i in unroll(0, coarsening_factor) {
                        @@body(math, gid_x, gid_y + i * bdim_y, out_acc, arr_acc, mask);
                    }
                } else {                                                 // center
                    let arr_acc = get_acc_bh(arr_gpu, set_pixel_fn(arr_gpu), get_pixel_ldg_fn(arr_gpu), (Boundary::Center, Boundary::Center), bh_lower, bh_upper);
                    for i in unroll(0, coarsening_factor) {
                        @@body(math, gid_x, gid_y + i * bdim_y, out_acc, arr_acc, mask);
                    }
                }
            }
        }
    } else {
        for bounds, region in iterate_2dregion((0, 0), (out.width, out.height / coarsening_factor), (bx * block(0), by * block(1))) {
            let (bounds_row, bounds_col) = bounds;
            let grid = (bounds_row(1) - bounds_row(0), bounds_col(1) - bounds_col(0), 1);

            let arr_acc = get_acc_bh(arr_gpu, set_pixel_fn(arr_gpu), get_pixel_ldg_fn(arr_gpu), region, bh_lower, bh_upper);
            let out_acc = get_acc(out_gpu, set_pixel_fn(out_gpu), get_pixel_fn(out_gpu));

            for benchmark_acc(acc) {
                for tid, bid, bdim, gdim, gid in acc.exec(grid, block) {
                    let (tidx,  tidy,  _) = tid;
                    let (bidx,  bidy,  _) = bid;
                    let (bdimx, bdimy, _) = bdim;
                    let tid_x  = tidx();
                    let tid_y  = tidy();
                    let bid_x  = bidx();
                    let bid_y  = bidy();
                    let bdim_x = bdimx();
                    let bdim_y = bdimy();
                    let gid_x = bounds_row(0)                     + tid_x + bdim_x * bid_x;
                    let gid_y = bounds_col(0) * coarsening_factor + tid_y + bdim_y * bid_y * coarsening_factor;

                    for i in unroll(0, coarsening_factor) {
                        @@body(math, gid_x, gid_y + i * bdim_y, out_acc, arr_acc, mask);
                    }
                }
            }
        }
    }

    copy_img(out_gpu, out);
    release(arr_gpu.buf);
    release(out_gpu.buf);
}

fn @iteration_advanced(math: Intrinsics, out: Img, arr: Img, mask: Mask, bh_lower: BoundaryFn, bh_upper: BoundaryFn, body: StencilFn) -> () {
    let acc = accelerator(device_id);
    let arr_gpu = alloc_img(arr, acc.alloc);
    let out_gpu = alloc_img(out, acc.alloc);
    copy_img(arr, arr_gpu);

    let coarsening_factor = 1;
    let (block, _) = compute_config((mask.size_x / 2, mask.size_y / 2), coarsening_factor);
    let grid       = (out.width, out.height / coarsening_factor, 1);

    // compute number of steps required to stage data to shared memory
    let range_row = mask.size_x / 2;
    let range_col = mask.size_y / 2;
    let steps_x   = 2;
    let offset_y  = if (mask.size_y-1) % block(1) == 0 { 0 } else { 1 };
    let steps_y   = coarsening_factor + (mask.size_y-1) / block(1) + offset_y;

    for benchmark_acc(acc) {
        for tid, bid, bdim, gdim, gid in acc.exec(grid, block) {
            let (tidx,  tidy,  _) = tid;
            let (bidx,  bidy,  _) = bid;
            let (bdimx, bdimy, _) = bdim;
            let tid_x  = tidx();
            let tid_y  = tidy();
            let bid_x  = bidx();
            let bid_y  = bidy();
            let bdim_x = bdimx();
            let bdim_y = bdimy();
            let gid_x  = tid_x + bdim_x * bid_x;
            let gid_y  = tid_y + bdim_y * bid_y * coarsening_factor;

            let spm_stride =                     block(0) + 2 * range_row;
            let spm_height = coarsening_factor * block(1) + 2 * range_col;
            let spm        = reserve_shared[f32](spm_stride * spm_height);

            for y in unroll(0, steps_y) {
                let lid_y = tid_y             + y*bdim_y;
                let idx_y = gid_y - range_col + y*bdim_y;
                for x in unroll(0, steps_x) {
                    let lid_x = tid_x             + x*bdim_x;
                    let idx_x = gid_x - range_row + x*bdim_x;

                    if lid_x < spm_stride && lid_y < spm_height {
                        let gpu_acc = get_acc_bh(arr_gpu, set_pixel_fn(arr_gpu), get_pixel_ldg_fn(arr_gpu), (Boundary::Unknown, Boundary::Unknown), bh_lower, bh_upper); // TODO: set region!
                        let spm_acc = get_acc_memory(set_pixel_shared_fn(spm), get_pixel_shared_fn(spm), spm_stride, spm_height);
                        spm_acc.write(lid_x, lid_y, gpu_acc.read(idx_x, idx_y));
                    }
                }
            }

            acc.barrier();

            for i in unroll(0, coarsening_factor) {
                // index space: block
                let out_acc =        get_acc_offset(out_gpu, set_pixel_fn(out_gpu), get_pixel_fn(out_gpu), bdim_x * bid_x, bdim_y * bid_y * coarsening_factor + i * bdim_y);
                let arr_acc = get_acc_offset_memory(set_pixel_shared_fn(spm), get_pixel_shared_fn(spm), spm_stride, spm_height, range_row, range_col + i * bdim_y);
                @@body(math, tid_x, tid_y, out_acc, arr_acc, mask);
            }
        }
    }

    copy_img(out_gpu, out);
    release(arr_gpu.buf);
    release(out_gpu.buf);
}

fn @iteration_sep(math: Intrinsics, out: Img, arr: Img, mask_row: MaskSep, mask_col: MaskSep, bh_lower: BoundaryFn, bh_upper: BoundaryFn, body: StencilSepFn) -> () {
    let acc = accelerator(device_id);
    let arr_gpu = alloc_img(arr, acc.alloc);
    let out_gpu = alloc_img(out, acc.alloc);
    let tmp_gpu = alloc_img(out, acc.alloc);
    copy_img(arr, arr_gpu);

    let coarsening_factor = 1;
    let grid   = (out.width, out.height / coarsening_factor, 1);
    let (block_row, _) = compute_config((mask_row.size / 2, 1), coarsening_factor);
    let (block_col, _) = compute_config((1, mask_col.size / 2), coarsening_factor);

    for benchmark_acc(acc) {
        for tid, bid, bdim, gdim, gid in acc.exec(grid, block_col) {
            let (tidx,  tidy,  _) = tid;
            let (bidx,  bidy,  _) = bid;
            let (bdimx, bdimy, _) = bdim;
            let tid_x  = tidx();
            let tid_y  = tidy();
            let bid_x  = bidx();
            let bid_y  = bidy();
            let bdim_x = bdimx();
            let bdim_y = bdimy();
            let gid_x  = tid_x + bdim_x * bid_x;
            let gid_y  = tid_y + bdim_y * bid_y * coarsening_factor;
            let is_row = false;

            let arr_acc = get_acc_bh(arr_gpu, set_pixel_fn(arr_gpu), get_pixel_ldg_fn(arr_gpu), (Boundary::Unknown, Boundary::Unknown), bh_lower, bh_upper);
            let tmp_acc = get_acc(tmp_gpu, set_pixel_fn(tmp_gpu), get_pixel_fn(tmp_gpu));

            for i in unroll(0, coarsening_factor) {
                @@body(math, gid_x, gid_y + i * bdim_y, tmp_acc, arr_acc, mask_col, is_row);
            }
        }
    }
    for benchmark_acc(acc) {
        for tid, bid, bdim, gdim, gid in acc.exec(grid, block_row) {
            let (tidx,  tidy,  _) = tid;
            let (bidx,  bidy,  _) = bid;
            let (bdimx, bdimy, _) = bdim;
            let tid_x  = tidx();
            let tid_y  = tidy();
            let bid_x  = bidx();
            let bid_y  = bidy();
            let bdim_x = bdimx();
            let bdim_y = bdimy();
            let gid_x  = tid_x + bdim_x * bid_x;
            let gid_y  = tid_y + bdim_y * bid_y * coarsening_factor;
            let is_row = true;

            let tmp_acc = get_acc_bh(tmp_gpu, set_pixel_fn(tmp_gpu), get_pixel_ldg_fn(tmp_gpu), (Boundary::Unknown, Boundary::Unknown), bh_lower, bh_upper);
            let out_acc = get_acc(out_gpu, set_pixel_fn(out_gpu), get_pixel_fn(out_gpu));

            for i in unroll(0, coarsening_factor) {
                @@body(math, gid_x, gid_y + i * bdim_y, out_acc, tmp_acc, mask_row, is_row);
            }
        }
    }

    copy_img(out_gpu, out);
    release(arr_gpu.buf);
    release(out_gpu.buf);
    release(tmp_gpu.buf);
}

fn @iteration_sep_bounds(math: Intrinsics, out: Img, arr: Img, mask_row: MaskSep, mask_col: MaskSep, bh_lower: BoundaryFn, bh_upper: BoundaryFn, body: StencilSepFn) -> () {
    let acc = accelerator(device_id);
    let arr_gpu = alloc_img(arr, acc.alloc);
    let out_gpu = alloc_img(out, acc.alloc);
    let tmp_gpu = alloc_img(out, acc.alloc);
    copy_img(arr, arr_gpu);

    // compute the number of blocks required for boundary handling
    let coarsening_factor = 1;
    let (block_row, (bx, _)) = compute_config((mask_row.size / 2, 1), coarsening_factor);
    let (block_col, (_, by)) = compute_config((1, mask_col.size / 2), coarsening_factor);

    // define if we want to generate one big kernel or multiple kernels
    let big_kernel = false;

    if big_kernel {
        let grid = (out.width, out.height / coarsening_factor, 1);

        // column component
        for benchmark_acc(acc) {
            let tmp_acc = get_acc(tmp_gpu, set_pixel_fn(tmp_gpu), get_pixel_fn(tmp_gpu));
            for tid, bid, bdim, gdim, gid in acc.exec(grid, block_col) {
                let (tidx,  tidy,  _) = tid;
                let (bidx,  bidy,  _) = bid;
                let (bdimx, bdimy, _) = bdim;
                let (_,     gdimy, _) = gdim;
                let tid_x  = tidx();
                let tid_y  = tidy();
                let bid_x  = bidx();
                let bid_y  = bidy();
                let bdim_x = bdimx();
                let bdim_y = bdimy();
                let gdim_y = gdimy();
                let gid_x  = tid_x + bdim_x * bid_x;
                let gid_y  = tid_y + bdim_y * bid_y * coarsening_factor;
                let is_row = false;

                if bid_y < by {                  // top
                    let arr_acc = get_acc_bh(arr_gpu, set_pixel_fn(arr_gpu), get_pixel_ldg_fn(arr_gpu), (Boundary::Center, Boundary::Lower), bh_lower, bh_upper);
                    for i in unroll(0, coarsening_factor) {
                        @@body(math, gid_x, gid_y + i * bdim_y, tmp_acc, arr_acc, mask_col, is_row);
                    }
                } else if bid_y >= gdim_y - by { // bottom
                    let arr_acc = get_acc_bh(arr_gpu, set_pixel_fn(arr_gpu), get_pixel_ldg_fn(arr_gpu), (Boundary::Center, Boundary::Upper), bh_lower, bh_upper);
                    for i in unroll(0, coarsening_factor) {
                        @@body(math, gid_x, gid_y + i * bdim_y, tmp_acc, arr_acc, mask_col, is_row);
                    }
                } else {                         // center
                    let arr_acc = get_acc_bh(arr_gpu, set_pixel_fn(arr_gpu), get_pixel_ldg_fn(arr_gpu), (Boundary::Center, Boundary::Center), bh_lower, bh_upper);
                    for i in unroll(0, coarsening_factor) {
                        @@body(math, gid_x, gid_y + i * bdim_y, tmp_acc, arr_acc, mask_col, is_row);
                    }
                }
            }
        }

        // row component
        for benchmark_acc(acc) {
            for tid, bid, bdim, gdim, gid in acc.exec(grid, block_row) {
                let (tidx,  tidy,  _) = tid;
                let (bidx,  bidy,  _) = bid;
                let (bdimx, bdimy, _) = bdim;
                let (gdimx, _,     _) = gdim;
                let tid_x  = tidx();
                let tid_y  = tidy();
                let bid_x  = bidx();
                let bid_y  = bidy();
                let bdim_x = bdimx();
                let bdim_y = bdimy();
                let gdim_x = gdimx();
                let gid_x  = tid_x + bdim_x * bid_x;
                let gid_y  = tid_y + bdim_y * bid_y * coarsening_factor;
                let is_row  = true;
                let out_acc = get_acc(out_gpu, set_pixel_fn(out_gpu), get_pixel_fn(out_gpu));

                if bid_x < bx {                  // left
                    let tmp_acc = get_acc_bh(tmp_gpu, set_pixel_fn(tmp_gpu), get_pixel_ldg_fn(tmp_gpu), (Boundary::Lower, Boundary::Center), bh_lower, bh_upper);
                    for i in unroll(0, coarsening_factor) {
                        @@body(math, gid_x, gid_y + i * bdim_y, out_acc, tmp_acc, mask_row, is_row);
                    }
                } else if bid_x >= gdim_x - bx { // right
                    let tmp_acc = get_acc_bh(tmp_gpu, set_pixel_fn(tmp_gpu), get_pixel_ldg_fn(tmp_gpu), (Boundary::Upper, Boundary::Center), bh_lower, bh_upper);
                    for i in unroll(0, coarsening_factor) {
                        @@body(math, gid_x, gid_y + i * bdim_y, out_acc, tmp_acc, mask_row, is_row);
                    }
                } else {                         // center
                    let tmp_acc = get_acc_bh(tmp_gpu, set_pixel_fn(tmp_gpu), get_pixel_ldg_fn(tmp_gpu), (Boundary::Center, Boundary::Center), bh_lower, bh_upper);
                    for i in unroll(0, coarsening_factor) {
                        @@body(math, gid_x, gid_y + i * bdim_y, out_acc, tmp_acc, mask_row, is_row);
                    }
                }
            }
        }
    } else {
        for bounds, boundary_col in iterate_1dregion(0, out.height / coarsening_factor, by * block_col(1)) {
            let region = (Boundary::Center, boundary_col);
            let grid   = (out.width, bounds(1) - bounds(0), 1);

            let arr_acc = get_acc_bh(arr_gpu, set_pixel_fn(arr_gpu), get_pixel_ldg_fn(arr_gpu), region, bh_lower, bh_upper);
            let tmp_acc = get_acc(tmp_gpu, set_pixel_fn(tmp_gpu), get_pixel_fn(tmp_gpu));

            for benchmark_acc(acc) {
                for tid, bid, bdim, gdim, gid in acc.exec(grid, block_col) {
                    let (tidx,  tidy,  _) = tid;
                    let (bidx,  bidy,  _) = bid;
                    let (bdimx, bdimy, _) = bdim;
                    let tid_x  = tidx();
                    let tid_y  = tidy();
                    let bid_x  = bidx();
                    let bid_y  = bidy();
                    let bdim_x = bdimx();
                    let bdim_y = bdimy();
                    let gid_x  =                                 tid_x + bdim_x * bid_x;
                    let gid_y  = bounds(0) * coarsening_factor + tid_y + bdim_y * bid_y * coarsening_factor;
                    let is_row = false;

                    for i in unroll(0, coarsening_factor) {
                        @@body(math, gid_x, gid_y + i * bdim_y, tmp_acc, arr_acc, mask_col, is_row);
                    }
                }
            }
        }

        for bounds, boundary_row in iterate_1dregion(0, out.width, bx * block_row(0)) {
            let region = (boundary_row, Boundary::Center);
            let grid   = (bounds(1) - bounds(0), out.height / coarsening_factor, 1);

            let tmp_acc = get_acc_bh(tmp_gpu, set_pixel_fn(tmp_gpu), get_pixel_ldg_fn(tmp_gpu), region, bh_lower, bh_upper);
            let out_acc = get_acc(out_gpu, set_pixel_fn(out_gpu), get_pixel_fn(out_gpu));

            for benchmark_acc(acc) {
                for tid, bid, bdim, gdim, gid in acc.exec(grid, block_row) {
                    let (tidx,  tidy,  _) = tid;
                    let (bidx,  bidy,  _) = bid;
                    let (bdimx, bdimy, _) = bdim;
                    let tid_x  = tidx();
                    let tid_y  = tidy();
                    let bid_x  = bidx();
                    let bid_y  = bidy();
                    let bdim_x = bdimx();
                    let bdim_y = bdimy();
                    let gid_x  = bounds(0) + tid_x + bdim_x * bid_x;
                    let gid_y  =             tid_y + bdim_y * bid_y * coarsening_factor;
                    let is_row = true;

                    for i in unroll(0, coarsening_factor) {
                        @@body(math, gid_x, gid_y + i * bdim_y, out_acc, tmp_acc, mask_row, is_row);
                    }
                }
            }
        }
    }

    copy_img(out_gpu, out);
    release(arr_gpu.buf);
    release(out_gpu.buf);
    release(tmp_gpu.buf);
}

fn @iteration_sep_advanced(math: Intrinsics, out: Img, arr: Img, mask_row: MaskSep, mask_col: MaskSep, bh_lower: BoundaryFn, bh_upper: BoundaryFn, body: StencilSepFn) -> () {
    let acc = accelerator(device_id);
    let arr_gpu = alloc_img(arr, acc.alloc);
    let out_gpu = alloc_img(out, acc.alloc);
    copy_img(arr, arr_gpu);

    let coarsening_factor = 1;
    let (block, _) = compute_config((mask_row.size / 2, mask_col.size / 2), coarsening_factor);
    let grid       = (out.width, out.height / coarsening_factor, 1);

    // compute number of steps required to stage data to shared memory
    let range_row = mask_row.size / 2;
    let range_col = mask_col.size / 2;
    let offset_y  = if (mask_col.size-1) % block(1) == 0 { 0 } else { 1 };
    let steps_x   = 2;
    let steps_y   = coarsening_factor + (mask_col.size-1) / block(1) + offset_y;

    for benchmark_acc(acc) {
        for tid, bid, bdim, gdim, gid in acc.exec(grid, block) {
            let (tidx,  tidy,  _) = tid;
            let (bidx,  bidy,  _) = bid;
            let (bdimx, bdimy, _) = bdim;
            let tid_x  = tidx();
            let tid_y  = tidy();
            let bid_x  = bidx();
            let bid_y  = bidy();
            let bdim_x = bdimx();
            let bdim_y = bdimy();
            let gid_x  = tid_x + bdim_x * bid_x;
            let gid_y  = tid_y + bdim_y * bid_y * coarsening_factor;

            let spm_stride     =                     block(0) + 2 * range_row;
            let spm_height_col = coarsening_factor * block(1) + 2 * range_col;
            let spm_height_row = coarsening_factor * block(1);
            let spm_col = reserve_shared[f32](spm_stride * spm_height_col);
            let spm_row = reserve_shared[f32](spm_stride * spm_height_row);

            for y in unroll(0, steps_y) {
                let lid_y = tid_y             + y*bdim_y;
                let idx_y = gid_y - range_col + y*bdim_y;
                for x in unroll(0, steps_x) {
                    let lid_x = tid_x             + x*bdim_x;
                    let idx_x = gid_x - range_row + x*bdim_x;

                    if lid_x < spm_stride && lid_y < spm_height_col {
                        let gpu_acc = get_acc_bh(arr_gpu, set_pixel_fn(arr_gpu), get_pixel_ldg_fn(arr_gpu), (Boundary::Unknown, Boundary::Unknown), bh_lower, bh_upper); // TODO: set region!
                        let spm_acc = get_acc_memory(set_pixel_shared_fn(spm_col), get_pixel_shared_fn(spm_col), spm_stride, spm_height_col);
                        spm_acc.write(lid_x, lid_y, gpu_acc.read(idx_x, idx_y));
                    }
                }
            }

            acc.barrier();

            for i in unroll(0, coarsening_factor) {
                let is_row = false;
                {
                    // index space: block
                    let out_acc = get_acc_offset_memory(set_pixel_shared_fn(spm_row), get_pixel_shared_fn(spm_row), spm_stride, spm_height_row, range_row,             i * bdim_y);
                    let arr_acc = get_acc_offset_memory(set_pixel_shared_fn(spm_col), get_pixel_shared_fn(spm_col), spm_stride, spm_height_col, range_row, range_col + i * bdim_y);
                    @@body(math, tid_x, tid_y, out_acc, arr_acc, mask_col, is_row);
                }
                if tid_x < range_row {
                    // left halo
                    let out_acc = get_acc_offset_memory(set_pixel_shared_fn(spm_row), get_pixel_shared_fn(spm_row), spm_stride, spm_height_row, 0,             i * bdim_y);
                    let arr_acc = get_acc_offset_memory(set_pixel_shared_fn(spm_col), get_pixel_shared_fn(spm_col), spm_stride, spm_height_col, 0, range_col + i * bdim_y);
                    @@body(math, tid_x, tid_y, out_acc, arr_acc, mask_col, is_row);
                }
                if tid_x >= bdim_x - range_row {
                    // right halo
                    let out_acc = get_acc_offset_memory(set_pixel_shared_fn(spm_row), get_pixel_shared_fn(spm_row), spm_stride, spm_height_row, range_row + range_row,             i * bdim_y);
                    let arr_acc = get_acc_offset_memory(set_pixel_shared_fn(spm_col), get_pixel_shared_fn(spm_col), spm_stride, spm_height_col, range_row + range_row, range_col + i * bdim_y);
                    @@body(math, tid_x, tid_y, out_acc, arr_acc, mask_col, is_row);
                }
            }

            acc.barrier();

            for i in unroll(0, coarsening_factor) {
                // index space: block
                let is_row  = true;
                let out_acc =        get_acc_offset(out_gpu, set_pixel_fn(out_gpu), get_pixel_fn(out_gpu), bdim_x * bid_x, bdim_y * bid_y * coarsening_factor + i * bdim_y);
                let arr_acc = get_acc_offset_memory(set_pixel_shared_fn(spm_row), get_pixel_shared_fn(spm_row), spm_stride, spm_height_row, range_row, i * bdim_y);
                @@body(math, tid_x, tid_y, out_acc, arr_acc, mask_row, is_row);
            }
        }
    }

    copy_img(out_gpu, out);
    release(arr_gpu.buf);
    release(out_gpu.buf);
}
