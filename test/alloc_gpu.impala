fn @iteration(gpu: Accelerator, width: i32, height: i32, body: fn(i32, i32) -> ()) -> () {
    let grid  = (width, height, 1);
    let block = (128, 1, 1);
    for tid, bid, bdim, gdim, gid in gpu.exec(grid, block) {
        let (gidx,  gidy,  _) = gid;
        let gid_x = gidx();
        let gid_y = gidy();
        @@body(gid_x, gid_y);
    }
    gpu.sync();
}

fn @read(buf: Buffer, i: i32) -> f32 { bitcast[&[1][f32]](buf.data)(i) }
fn @write(buf: Buffer, i: i32, v: f32) -> () { bitcast[&mut[1][f32]](buf.data)(i) = v }

fn main() -> i32 {
    let width   = 2048;
    let height  = 2048;
    let gpu     = accelerator(device_id);
    let arr     = alloc_cpu(width * height * sizeof[f32]());
    let out     = alloc_cpu(width * height * sizeof[f32]());
    let arr_gpu = gpu.alloc(width * height * sizeof[f32]());
    let out_gpu = gpu.alloc(width * height * sizeof[f32]());
    for i in range(0, width*height) {
        let arr_ptr = bitcast[&mut[f32]](arr.data);
        let out_ptr = bitcast[&mut[f32]](out.data);
        arr_ptr(i) = i as f32;
        out_ptr(i) = 0.0f;
    }

    copy(arr, arr_gpu);

    for x, y in iteration(gpu, width, height) {
        let idx = y*width + x;
        write(out_gpu, idx, read(arr_gpu, idx));
    }

    copy(out_gpu, out);

    let mut passed = 0;
    for i in range(0, width*height) {
        if bitcast[&[f32]](out.data)(i) != bitcast[&[f32]](arr.data)(i) { passed++; }
    }
    if passed == 0 {
        print_string("Test PASSED!\n");
    } else {
        print_string("Test FAILED!\n");
    }

    release(out_gpu);
    release(arr_gpu);
    release(arr);
    release(out);

    if passed >= 256 { 255 } else { passed }
}
