fn @iteration(body: fn(i32, i32) -> ()) = @|acc: Accelerator, width: i32, height: i32| {
    let vprintf = if is_nvvm() { nvvm_vprintf } else { cuda_vprintf };
    let grid  = (width, height, 1);
    let block = (128, 1, 1);
    for work_item in acc.exec(grid, block) {
        if work_item.gidx() == 0 && work_item.gidy() == 0 {
            let mut tmp: [i32 * 4];
            tmp(0) = 23;
            *(&mut tmp(2) as &mut i64) = bitcast[i64](42:f64);
            vprintf("hello from %d, %f\n", &tmp as &[u8]);
        }
        @body(work_item.gidx(), work_item.gidy());
    }
    acc.sync();
}

fn @read(buf: Buffer, i: i32) = bitcast[&addrspace(1)[f32]](buf.data)(i)
fn @write(buf: Buffer, i: i32, v: f32) = bitcast[&mut addrspace(1)[f32]](buf.data)(i) = v

#[export]
fn main() -> i32 {
    let width   = 2048;
    let height  = 2048;
    let acc     = accelerator(device_id);
    let arr     = alloc_cpu((width * height) as i64 * sizeof[f32]());
    let out     = alloc_cpu((width * height) as i64 * sizeof[f32]());
    let arr_gpu = acc.alloc((width * height) as i64 * sizeof[f32]());
    let out_gpu = acc.alloc((width * height) as i64 * sizeof[f32]());
    for i in range(0, width*height) {
        let arr_ptr = bitcast[&mut[f32]](arr.data);
        let out_ptr = bitcast[&mut[f32]](out.data);
        arr_ptr(i) = i as f32;
        out_ptr(i) = 0:f32;
    }

    copy(arr, arr_gpu);

    for x, y in iteration(acc, width, height) {
        let idx = y*width + x;
        write(out_gpu, idx, read(arr_gpu, idx));
    }

    copy(out_gpu, out);

    let mut passed = 0;
    for i in range(0, width*height) {
        if bitcast[&[f32]](out.data)(i) != bitcast[&[f32]](arr.data)(i) { passed++; }
    }
    if passed == 0 {
        print_string("Test PASSED!\n");
    } else {
        print_string("Test FAILED!\n");
    }

    release(out_gpu);
    release(arr_gpu);
    release(arr);
    release(out);

    if passed >= 256 { 255 } else { passed }
}
