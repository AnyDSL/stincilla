fn @iteration_multi(body: fn(i32, i32, &mut addrspace(1)[f32], &addrspace(1)[f32]) -> ()) = @|width: i32, height: i32, out: Buffer, arr: Buffer| {
    let num_dev  = 2;
    let ids      = runtime_alloc(0, num_dev as i64 * sizeof[i32]()) as &mut[i32];
    let size_gpu = (width * height / num_dev) as i64 * sizeof[f32]();

    for dev in range(0, num_dev) {
        let offset = dev as i64 * size_gpu;
        let grid  = (width, height / num_dev, 1);
        let block = (128, 1, 1);

        ids(dev) = for spawn() {
            let acc = accelerator(dev);
            let arr_gpu = acc.alloc(size_gpu);
            let out_gpu = acc.alloc(size_gpu);
            copy_offset(arr, offset, arr_gpu, 0, size_gpu);

            for work_item in acc.exec(grid, block) {
                @body(work_item.gidx(), work_item.gidy(), bitcast[&mut addrspace(1)[f32]](out_gpu.data), bitcast[&addrspace(1)[f32]](arr_gpu.data));
            }
            acc.sync();

            copy_offset(out_gpu, 0, out, offset, size_gpu);
            release(out_gpu);
            release(arr_gpu);
        }
    }

    for dev in range(0, num_dev) {
        sync(ids(dev));
    }
    runtime_release(0, ids as &[i8]);
}

#[export]
fn main() -> i32 {
    let width   = 4096;
    let height  = 4096;
    let arr_buf = alloc_cpu((width * height) as i64 * sizeof[f32]());
    let out_buf = alloc_cpu((width * height) as i64 * sizeof[f32]());
    let arr = bitcast[&mut[f32]](arr_buf.data);
    let out = bitcast[&mut[f32]](out_buf.data);
    init_rand(arr, width, height);
    init_zero(out, width, height);

    for x, y, out, arr in iteration_multi(width, height, out_buf, arr_buf) {
        out(y*width + x) = arr(y*width + x);
    }

    let mut passed = 0;
    for i in range(0, width*height) {
        if out(i) != arr(i) { passed++; }
    }
    if passed == 0 {
        print_string("Test PASSED!\n");
    } else {
        print_string("Test FAILED!\n");
    }

    release(arr_buf);
    release(out_buf);

    if passed >= 256 { 255 } else { passed }
}
