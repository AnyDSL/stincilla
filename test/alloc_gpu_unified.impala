fn range(lower: i32, upper: i32, body: fn(i32) -> ()) -> () {
    if lower < upper {
        body(lower);
        range(lower+1, upper, body, return)
    }
}

fn iteration(width: i32, height: i32, body: fn(i32, i32) -> ()) -> () {
    let grid  = (width, height, 1);
    let block = (128, 1, 1);
    with acc.exec(acc.dev(), grid, block) @{
        body(acc.gidx(), acc.gidy());
    }
}

fn read(buf: Buffer, i: i32) -> f32 { bitcast[&[1][f32]](buf.data)(i) }
fn write(buf: Buffer, i: i32, v: f32) -> () { bitcast[&mut[1][f32]](buf.data)(i) = v }

fn main() -> i32 {
    let width   = 2048;
    let height  = 2048;
    let arr_buf = acc.alloc_unified(acc.dev(), width * height * sizeof[f32]());
    let out_buf = acc.alloc_unified(acc.dev(), width * height * sizeof[f32]());
    let arr_cpu = bitcast[&mut[f32]](arr_buf.data);
    let out_cpu = bitcast[&mut[f32]](out_buf.data);
    for i in range(0, width*height) {
        arr_cpu(i) = i as f32;
        out_cpu(i) = 0.0f;
    }

    for x, y in @iteration(width, height) {
        let idx = y*width + x;
        write(out_buf, idx, read(arr_buf, idx));
    }

    let mut passed = 0;
    for i in range(0, width*height) {
        if out_cpu(i) != arr_cpu(i) { passed++; }
    }
    if passed == 0 {
        print_string("Test PASSED!\n");
    } else {
        print_string("Test FAILED!\n");
    }

    release(arr_buf);
    release(out_buf);

    if passed >= 256 { 255 } else { passed }
}
