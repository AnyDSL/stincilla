fn range(lower: i32, upper: i32, body: fn(i32) -> ()) -> () {
    if lower < upper {
        body(lower);
        range(lower+1, upper, body, return)
    }
}

fn iteration(width: i32, height: i32, body: fn(i32, i32) -> ()) -> () {
    let grid  = (width, height, 1);
    let block = (128, 1, 1);
    with acc.exec(acc.dev(), grid, block) @{
        body(acc.gidx(), acc.gidy());
    }
}

fn read(buf: Buffer, i: i32) -> f16 { bitcast[&[1][f16]](buf.data)(i) }
fn write(buf: Buffer, i: i32, v: f16) -> () { bitcast[&mut[1][f16]](buf.data)(i) = v }

fn main() -> i32 {
    let width   = 2048;
    let height  = 2048;
    let arr     = alloc_cpu(width * height * sizeof[f16]());
    let out     = alloc_cpu(width * height * sizeof[f16]());
    let arr_gpu = acc.alloc(acc.dev(), width * height * sizeof[f16]());
    let out_gpu = acc.alloc(acc.dev(), width * height * sizeof[f16]());
    for i in range(0, width*height) {
        let arr_ptr = bitcast[&mut[f16]](arr.data);
        let out_ptr = bitcast[&mut[f16]](out.data);
        arr_ptr(i) = i as f16;
        out_ptr(i) = 0.0h;
    }

    copy(arr, arr_gpu, width * height * sizeof[f16]());

    for x, y in @iteration(width, height) {
        let idx = y*width + x;
        write(out_gpu, idx, read(arr_gpu, idx));
    }

    copy(out_gpu, out, width * height * sizeof[f16]());

    let mut passed = 0;
    for i in range(0, width*height) {
        if bitcast[&[f16]](out.data)(i) != bitcast[&[f16]](arr.data)(i) { passed++; }
    }
    if passed == 0 {
        print_string("Test PASSED!\n");
    } else {
        print_string("Test FAILED!\n");
    }

    release(out_gpu);
    release(arr_gpu);
    release(arr);
    release(out);

    if passed >= 256 { 255 } else { passed }
}
