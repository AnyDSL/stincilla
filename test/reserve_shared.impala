fn @iteration(body: fn(i32, i32, fn(i32, i32) -> f32, fn(i32, i32, f32) -> ()) -> ()) = @|out: Buffer, arr: Buffer, width: i32, height: i32| {
    let acc         = accelerator(device_id);
    let arr_buf_gpu = acc.alloc((width * height) as i64 * sizeof[f32]());
    let out_buf_gpu = acc.alloc((width * height) as i64 * sizeof[f32]());
    let     arr_gpu = bitcast[&    addrspace(1)[f32], &[i8]](arr_buf_gpu.data);
    let     out_gpu = bitcast[&mut addrspace(1)[f32], &[i8]](out_buf_gpu.data);
    copy(arr, arr_buf_gpu);

    let grid  = (width, height, 1);
    let block = (128, 1, 1);
    let (block_x, block_y, _) = block;
    for work_item in acc.exec(grid, block) {
        let shared = reserve_shared[f32](block_x * block_y);
        // arr -> shared
        @body(work_item.gidx(), work_item.gidy(),
              |x, y|        arr_gpu(y*width + x),
              |_x, _y, val| shared(work_item.tidx()) = val );
        // shared -> out
        @body(work_item.gidx(), work_item.gidy(),
              |_x, _y|    shared(work_item.tidx()),
              |x, y, val| out_gpu(y*width + x) = val );
    }
    acc.sync();

    copy(out_buf_gpu, out);
    release(out_buf_gpu);
    release(arr_buf_gpu);
}

#[export]
fn main() -> i32 {
    let width   = 2048;
    let height  = 2048;
    let arr     = alloc_cpu((width * height) as i64 * sizeof[f32]());
    let out     = alloc_cpu((width * height) as i64 * sizeof[f32]());
    for i in range(0, width*height) {
        let arr_ptr = bitcast[&mut[f32], &[i8]](arr.data);
        let out_ptr = bitcast[&mut[f32], &[i8]](out.data);
        arr_ptr(i) = i as f32;
        out_ptr(i) = 0:f32;
    }

    for x, y, read, write in iteration(out, arr, width, height) {
        let val = read(x, y);
        write(x, y, val);
    }

    let mut passed = 0;
    for i in range(0, width*height) {
        if bitcast[&[f32], &[i8]](out.data)(i) != bitcast[&[f32], &[i8]](arr.data)(i) { passed++; }
    }
    if passed == 0 {
        print_string("Test PASSED!\n");
    } else {
        print_string("Test FAILED!\n");
    }

    release(arr);
    release(out);

    if passed >= 256 { 255 } else { passed }
}
