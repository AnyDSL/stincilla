fn range(lower: i32, upper: i32, body: fn(i32) -> ()) -> () {
    if lower < upper {
        body(lower);
        range(lower+1, upper, body)
    }
}

fn @iteration(out: Buffer, arr: Buffer, width: i32, height: i32, body: fn(i32, i32, fn(i32, i32) -> f32, fn(i32, i32, f32) -> ()) -> ()) -> () {
    let acc         = accelerator(device_id);
    let arr_buf_gpu = acc.alloc(width * height * sizeof[f32]());
    let out_buf_gpu = acc.alloc(width * height * sizeof[f32]());
    let     arr_gpu = bitcast[&   [1][f32]](arr_buf_gpu.data);
    let     out_gpu = bitcast[&mut[1][f32]](out_buf_gpu.data);
    copy(arr, arr_buf_gpu, width * height * sizeof[f32]());

    let grid  = (width, height, 1);
    let block = (128, 1, 1);
    for tid, bid, bdim, gdim, gid in acc.exec(grid, block) {
        let (tidx,  tidy,  _) = tid;
        let (gidx,  gidy,  _) = gid;
        let tid_x = tidx();
        let gid_x = gidx();
        let gid_y = gidy();
        let shared = reserve_shared[f32](block(0) * block(1));
        // arr -> shared
        @@body(gid_x, gid_y,
               |x, y|      { arr_gpu(y*width + x) },
               |x, y, val| {  shared(tid_x) = val; });
        // shared -> out
        @@body(gid_x, gid_y,
               |x, y|      {  shared(tid_x) },
               |x, y, val| { out_gpu(y*width + x) = val; });
    }
    acc.sync();

    copy(out_buf_gpu, out, width * height * sizeof[f32]());
    release(out_buf_gpu);
    release(arr_buf_gpu);
}

fn main() -> i32 {
    let width   = 2048;
    let height  = 2048;
    let arr     = alloc_cpu(width * height * sizeof[f32]());
    let out     = alloc_cpu(width * height * sizeof[f32]());
    for i in range(0, width*height) {
        let arr_ptr = bitcast[&mut[f32]](arr.data);
        let out_ptr = bitcast[&mut[f32]](out.data);
        arr_ptr(i) = i as f32;
        out_ptr(i) = 0.0f;
    }

    for x, y, read, write in iteration(out, arr, width, height) {
        let val = read(x, y);
        write(x, y, val);
    }

    let mut passed = 0;
    for i in range(0, width*height) {
        if bitcast[&[f32]](out.data)(i) != bitcast[&[f32]](arr.data)(i) { passed++; }
    }
    if passed == 0 {
        print_string("Test PASSED!\n");
    } else {
        print_string("Test FAILED!\n");
    }

    release(arr);
    release(out);

    if passed >= 256 { 255 } else { passed }
}
