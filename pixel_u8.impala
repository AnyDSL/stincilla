type pixel_t = u8;
static nvvm_ldg = nvvm_ldg_u8;
static cuda_ldg = cuda_ldg_u8;
fn @is_same_pixel(a: u8, b: u8 ) -> bool { a == b }
fn @print_pixel(pixel: u8) -> () { print_i32(pixel as i32) }

// channels for HLS
type channel = channel_u8;
fn @read_channel   (c: &mut channel) ->  pixel_t { read_channel_u8(c) }
fn @read_channel2  (c: &mut channel) -> [pixel_t * 2] { read_channel2_u8(c) }
fn @read_channel4  (c: &mut channel) -> [pixel_t * 4] { read_channel4_u8(c) }
fn @read_channel8  (c: &mut channel) -> [pixel_t * 8] { read_channel8_u8(c) }
fn @read_channel16 (c: &mut channel) -> [pixel_t * 16] { read_channel16_u8(c) }
fn @read_channel32 (c: &mut channel) -> [pixel_t * 32] { read_channel32_u8(c) }
fn @write_channel  (c: &mut channel, v:  pixel_t      ) -> () { write_channel_u8(c, v) }
fn @write_channel2 (c: &mut channel, v: [pixel_t * 2 ]) -> () { write_channel2_u8(c, v) }
fn @write_channel4 (c: &mut channel, v: [pixel_t * 4 ]) -> () { write_channel4_u8(c, v) }
fn @write_channel8 (c: &mut channel, v: [pixel_t * 8 ]) -> () { write_channel8_u8(c, v) }
fn @write_channel16(c: &mut channel, v: [pixel_t * 16]) -> () { write_channel16_u8(c, v) }
fn @write_channel32(c: &mut channel, v: [pixel_t * 32]) -> () { write_channel32_u8(c, v) }
fn @bitcast_channel(c: &mut channel) -> [pixel_t * 2] { bitcast_channel_u8(c) }
