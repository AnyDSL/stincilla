/*
 * Harris Corner
 *
 * A Combined Corner and Edge Detector
 * Chris Harris and Mike Stephens - Alvey Vision Conference, 1988
 *
 */

extern
fn harris_corner(img_data: &[pixel_t], out_data: &mut[pixel_t]) -> () {
    let width  = 1024;
    let height = 1024;
    let stride = 1024;

    static mut in_c0 : pipe;
    static mut in_c1 : pipe;
    static mut dx_c  : pipe;
    static mut dy_c  : pipe;
    static mut dxx_c : pipe;
    static mut dxy_c : pipe;
    static mut dyy_c : pipe;
    static mut gxx_c : pipe;
    static mut gxy_c : pipe;
    static mut gyy_c : pipe;
    static mut dx_c0 : pipe;
    static mut dx_c1 : pipe;
    static mut dy_c0 : pipe;
    static mut dy_c1 : pipe;
    //         -- ix -|-- ixx -- sxx -
    //       /         \              \
    // in --            > ixy -- sxy --> hc -- out
    //       \         /              /
    //         -- iy -|-- iyy -- syy -
    let input  = new_img(width, height, stride, Buffer { data : bitcast[&[i8]](img_data), size : (width * height * sizeof[pixel_t]()) as i64, device : 0 });
    let harris = create_host_img(width, height);
    let dx  = create_virtual_img(width, height, &mut dx_c );
    let dy  = create_virtual_img(width, height, &mut dy_c );
    let dxx = create_virtual_img(width, height, &mut dxx_c);
    let dxy = create_virtual_img(width, height, &mut dxy_c);
    let dyy = create_virtual_img(width, height, &mut dyy_c);
    let gxx = create_virtual_img(width, height, &mut gxx_c);
    let gxy = create_virtual_img(width, height, &mut gxy_c);
    let gyy = create_virtual_img(width, height, &mut gyy_c);

    // compute the first derivative using the Sobel operator
    let mdx = get_mask3(sobel_mask3_x);
    let mdy = get_mask3(sobel_mask3_y);

    //let lower = clamp_lower;
    //let upper = clamp_upper;
    let lower = nobh_center;
    let upper = nobh_center;
    let enable_offset = 1;

    for benchmark_host(num_host_iter) {
        let (in0, in1) = split_image(math, input, &mut in_c0, &mut in_c1);
        for math, x, y, out, arrs in iteration(math, dx, make_img_list1(input, (mdx.size_x / 2, mdx.size_y / 2)), lower, upper) {
            out.write(x, y, apply_stencil(x, y, arrs.get(0), mdx));
        }
        for math, x, y, out, arrs in iteration(math, dy, make_img_list1(input, (mdy.size_x / 2, mdy.size_y / 2)), lower, upper) {
            out.write(x, y, apply_stencil(x, y, arrs.get(0), mdy));
        }

        // replicate virtual images for multiple reads
        let (dx0, dx1) = split_image(math, dx, &mut dx_c0, &mut dx_c1);
        let (dy0, dy1) = split_image(math, dy, &mut dy_c0, &mut dy_c1);

        // compute dxx, dyy, dxy
        for math, x, y, out, arrs in iteration(math, dxx, make_img_list1(dx0, (0, 0)), lower, upper) {
            let dx = arrs.get(0);
            out.write(x, y, dx.read(x, y) * dx.read(x, y));
        }
        for math, x, y, out, arrs in iteration(math, dyy, make_img_list1(dy0, (0, 0)), lower, upper) {
            let dy = arrs.get(0);
            out.write(x, y, dy.read(x, y) * dy.read(x, y));
        }
        for math, x, y, out, arrs in iteration(math, dxy, make_img_list2(dx1, (0, 0), dy1, (0, 0)), lower, upper) {
            let (dx, dy) = (arrs.get(0), arrs.get(1));
            out.write(x, y, dx.read(x, y) * dy.read(x, y));
        }

        // compute gxx, gyy, gxy using Gaussian blur
        let mg = get_mask3(gauss_mask3);

        for math, x, y, out, arrs in iteration(math, gxx, make_img_list1(dxx, (mg.size_x / 2, mg.size_y / 2)), lower, upper) {
            out.write(x, y, apply_stencil(x, y, arrs.get(0), mg));
        }
        for math, x, y, out, arrs in iteration(math, gyy, make_img_list1(dyy, (mg.size_x / 2, mg.size_y / 2)), lower, upper) {
            out.write(x, y, apply_stencil(x, y, arrs.get(0), mg));
        }
        for math, x, y, out, arrs in iteration(math, gxy, make_img_list1(dxy, (mg.size_x / 2, mg.size_y / 2)), lower, upper) {
            out.write(x, y, apply_stencil(x, y, arrs.get(0), mg));
        }

        // compute score for Harris corner
        for math, x, y, out, arrs in iteration(math, harris, make_img_list3(gxx, (0, 0), gyy, (0, 0), gxy, (0, 0)), lower, upper) {
            let (gxx_acc, gyy_acc, gxy_acc) = (arrs.get(0), arrs.get(1), arrs.get(2));
            let gxx     = gxx_acc.read(x, y);
            let gyy     = gyy_acc.read(x, y);
            let gxy     = gxy_acc.read(x, y);
            let det     = gxx * gyy - gxy * gxy;
            let trace   = gxx + gyy;
            out.write(x, y, det - trace * trace * k / k_den);
        }
    }
    print_total_timing();

    // post-processing: mark corners
    for y in range(0, height) {
        for x in range(0, width) {
            let harris_acc = get_acc(harris, |idx, val| { bitcast[&mut[pixel_t]](harris.buf.data)(idx) = val }, |idx| bitcast[&[pixel_t]](harris.buf.data)(idx));
            if harris_acc.read(x, y) > threshold {
                out_data(y*width + x) = markHigh;
            } else{
                out_data(y*width + x) = markLow;
            }
            //out_data(y*width + x) = harris_acc.read(x, y);
        }
    }

    release(harris.buf);
}
