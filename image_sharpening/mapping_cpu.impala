fn @set_pixeli16_fn(img: Img) = @|idx: i32, val: i16| bitcast[&mut[i16], &[i8]](img.buf.data)(idx) = val
fn @get_pixeli16_fn(img: Img) = @|idx: i32| bitcast[&[i16], &[i8]](img.buf.data)(idx)

fn @iteration1f1i(body: fn(i32, i32, Acc, Acci16) -> ()) = @|out: Img, arr: Img, bh_lower: BoundaryFni16, bh_upper: BoundaryFni16| {
    let out_acc = get_acc(out, set_pixel_fn(out), get_pixel_fn(out));
    let arr_acc = get_acci16_bh(arr, set_pixeli16_fn(arr), get_pixeli16_fn(arr), (Boundary::Unknown, Boundary::Unknown), bh_lower, bh_upper);

    for benchmark_cpu() {
        for y in outer_loop(0, out.height) {
            for x in inner_loop(0, out.width) {
                @body(x, y, out_acc, arr_acc);
            }
        }
    }
}
fn @iteration2i(body: fn(i32, i32, Acci16, Acci16) -> ()) = @|out: Img, arr: Img, bh_lower: BoundaryFni16, bh_upper: BoundaryFni16| {
    let out_acc = get_acci16(out, set_pixeli16_fn(out), get_pixeli16_fn(out));
    let arr_acc = get_acci16_bh(arr, set_pixeli16_fn(arr), get_pixeli16_fn(arr), (Boundary::Unknown, Boundary::Unknown), bh_lower, bh_upper);

    for benchmark_cpu() {
        for y in outer_loop(0, out.height) {
            for x in inner_loop(0, out.width) {
                @body(x, y, out_acc, arr_acc);
            }
        }
    }
}
fn @iteration2i1m(body: fn(i32, i32, Acci16, Acci16, Acc) -> ()) = @|out: Img, img: Img, map: Img, bh_lower: BoundaryFni16, bh_upper: BoundaryFni16| {
    let out_acc = get_acci16(out, set_pixeli16_fn(out), get_pixeli16_fn(out));
    let img_acc = get_acci16_bh(img, set_pixeli16_fn(img), get_pixeli16_fn(img), (Boundary::Unknown, Boundary::Unknown), bh_lower, bh_upper);
    let map_acc = get_acc(map, set_pixel_fn(map), get_pixel_fn(map));

    for benchmark_cpu() {
        for y in outer_loop(0, out.height) {
            for x in inner_loop(0, out.width) {
                @body(x, y, out_acc, img_acc, map_acc);
            }
        }
    }
}
fn @iteration3i(body: fn(i32, i32, Acci16, Acci16, Acci16) -> ()) = @|out: Img, img: Img, tmp: Img| {
    let out_acc = get_acci16(out, set_pixeli16_fn(out), get_pixeli16_fn(out));
    let img_acc = get_acci16(img, set_pixeli16_fn(img), get_pixeli16_fn(img));
    let tmp_acc = get_acci16(tmp, set_pixeli16_fn(tmp), get_pixeli16_fn(tmp));

    for benchmark_cpu() {
        for y in outer_loop(0, out.height) {
            for x in inner_loop(0, out.width) {
                @body(x, y, out_acc, img_acc, tmp_acc);
            }
        }
    }
}
fn @reduce(body: fn(i32, i32, Acci16) -> i32) = @|img: Img| -> i32 {
    let mut sum = 0;
    let img_acc = get_acci16(img, set_pixeli16_fn(img), get_pixeli16_fn(img));
    for y in range(0, img.height) {
        for x in range(0, img.width) {
            sum += @body(x, y, img_acc);
        }
    }
    sum
}
fn @histogram(body: fn(i32, i32, Acc) -> i32) = @|img: Img| -> Buffer {
    let hist_buf = alloc_cpu(256:i64 * sizeof[i32]());
    let     hist = bitcast[&mut[i32], &[i8]](hist_buf.data);
    let img_acc  = get_acc(img, set_pixel_fn(img), get_pixel_fn(img));

    for i in range(0, 256) {
        hist(i) = 0;
    }
    for y in range(0, img.height) {
        for x in range(0, img.width) {
            let bin = @body(x, y, img_acc);
            hist(bin)++;
        }
    }

    hist_buf
}
fn @inclusive_scan(hist_buf: Buffer, size: i32) -> Buffer {
    let scan_buf = alloc_cpu(size as i64 * sizeof[i32]());
    let     scan = bitcast[&mut[i32], &[i8]](scan_buf.data);
    let     hist = bitcast[&   [i32], &[i8]](hist_buf.data);
    scan(0) = hist(0);
    for i in range(1, size) {
        scan(i) = scan(i-1) + hist(i);
    }
    scan_buf
}
fn @find_position(body: fn(i32) -> i32) = @|scan_buf: Buffer, size: i32| -> i32 {
    let scan = bitcast[&[i32], &[i8]](scan_buf.data);
    for i in range(0, size) {
        if @body(scan(i)) != 0 { return(i) }
    }
    size
}
