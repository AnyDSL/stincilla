type BoundaryFni16 = fn(i32, i32, i32) -> BoundaryModei16;

struct Imgi16 {
    buf : Buffer,
    width  : i32,
    height : i32,
    stride : i32,
}

struct Acci16 {
    read  : fn(i32, i32) -> i16,
    write : fn(i32, i32, i16) -> (),
}

enum BoundaryModei16 {
    Index(i32),
    Const(i16)
}

fn @nobh_center_i16 (idx: i32, lower: i32, upper: i32) -> BoundaryModei16 { BoundaryModei16::Index(idx) }
fn @clamp_lower_i16 (idx: i32, lower: i32, upper: i32) -> BoundaryModei16 {
    BoundaryModei16::Index(if idx < lower { lower } else { idx })
}
fn @clamp_upper_i16 (idx: i32, lower: i32, upper: i32) -> BoundaryModei16 {
    BoundaryModei16::Index(if idx >= upper { upper - 1 } else { idx })
}
fn @mirror_lower_i16(idx: i32, lower: i32, upper: i32) -> BoundaryModei16 {
    BoundaryModei16::Index(if idx < lower { lower + (lower - idx-1) } else { idx })
}
fn @mirror_upper_i16(idx: i32, lower: i32, upper: i32) -> BoundaryModei16 {
    BoundaryModei16::Index(if idx >= upper { upper - (idx+1 - upper) } else { idx })
}

fn @map_boundary_modei16(mode: BoundaryModei16, bh_fun: fn(i32) -> BoundaryModei16) -> BoundaryModei16 {
    match mode {
        BoundaryModei16::Index(idx) => bh_fun(idx),
        BoundaryModei16::Const(val) => mode
    }
}

fn @read_pixeli16(x: i32, y: i32, region: Region, roi: RoI, read: fn(i32, i32) -> i16, bh_lower: BoundaryFni16, bh_upper: BoundaryFni16) -> i16 {
    let lower_x = roi.o_x;
    let lower_y = roi.o_y;
    let upper_x = roi.o_x + roi.width;
    let upper_y = roi.o_y + roi.height;

    let (mode_x, mode_y) = match region {
        (row, col) => {
            let mode_x = match row {
                Boundary::Lower   => bh_lower(roi.o_x + x, lower_x, upper_x),
                Boundary::Center  => BoundaryModei16::Index(roi.o_x + x),
                Boundary::Upper   => bh_upper(roi.o_x + x, lower_x, upper_x),
                Boundary::Unknown => map_boundary_modei16(bh_lower(roi.o_x + x, lower_x, upper_x), @|idx| bh_upper(idx, lower_x, upper_x))
            };
            let mode_y = match col {
                Boundary::Lower   => bh_lower(roi.o_y + y, lower_y, upper_y),
                Boundary::Center  => BoundaryModei16::Index(roi.o_y + y),
                Boundary::Upper   => bh_upper(roi.o_y + y, lower_y, upper_y),
                Boundary::Unknown => map_boundary_modei16(bh_lower(roi.o_y + y, lower_y, upper_y), @|idx| bh_upper(idx, lower_y, upper_y))
            };
            (mode_x, mode_y)
        }
    };

    match (mode_x, mode_y) {
        (BoundaryModei16::Index(x), BoundaryModei16::Index(y)) => read(x, y),
        (BoundaryModei16::Const(c), _) => c,
        (_, BoundaryModei16::Const(c)) => c,
        _ => undef()
    }
}

// &   [i16] on CPU/AVX
// &[1][i16] on CUDA/NVVM & OpenCL
fn @get_acci16_bh(img: Imgi16, set_pixel: fn(i32, i16) -> (), get_pixel: fn(i32) -> i16, region: Region, bh_lower: BoundaryFni16, bh_upper: BoundaryFni16) -> Acci16 {
    get_acci16_bh_offset(img, set_pixel, get_pixel, 0, 0, region, bh_lower, bh_upper)
}
fn @get_acci16_bh_offset(img: Imgi16, set_pixel: fn(i32, i16) -> (), get_pixel: fn(i32) -> i16, rox: i32, roy: i32, region: Region, bh_lower: BoundaryFni16, bh_upper: BoundaryFni16) -> Acci16 {
    Acci16 {
        read  : @|x, y|    read_pixeli16(x + rox, y + roy, region, RoI { o_x : 0, o_y : 0, width : img.width, height : img.height }, @|x, y| { get_pixel(y * img.stride + x) }, bh_lower, bh_upper),
        write : @|x, y, v| set_pixel((y + roy) * img.stride + x + rox, v)
    }
}
fn @get_acci16(img: Imgi16, set_pixel: fn(i32, i16) -> (), get_pixel: fn(i32) -> i16) -> Acci16 {
    get_acci16_offset(img, set_pixel, get_pixel, 0, 0)
}
fn @get_acci16_offset(img: Imgi16, set_pixel: fn(i32, i16) -> (), get_pixel: fn(i32) -> i16, rox: i32, roy: i32) -> Acci16 {
    Acci16 {
        read  : @|x, y|    { get_pixel((y + roy) * img.stride + x + rox) },
        write : @|x, y, v| { set_pixel((y + roy) * img.stride + x + rox, v) }
    }
}

fn @new_imgi16(width: i32, height: i32, stride: i32, buf: Buffer) -> Imgi16 {
    Imgi16 { buf : buf, width : width,  height : height, stride : stride }
}

fn @alloc_imgi16(img: Imgi16, alloc: fn(i32) -> Buffer) -> Imgi16 {
    new_imgi16(img.width, img.height, img.stride, alloc(img.stride * img.height * sizeof[i16]()))
}

fn @create_imgi16(width: i32, height: i32, alloc: fn(i32) -> Buffer) -> Imgi16 {
    let stride = round_up(width * sizeof[i16](), 64) / sizeof[i16]();
    new_imgi16(width, height, stride, alloc(stride * height * sizeof[i16]()))
}

fn @copy_imgi16(src: Imgi16, dst: Imgi16) -> () {
    copy(src.buf, dst.buf, dst.stride * dst.height * sizeof[i16]());
}
