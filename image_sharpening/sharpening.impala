type BoundaryFni16 = fn(i32, i32, i32) -> BoundaryModei16;

struct Imgi16 {
    buf : Buffer,
    width  : i32,
    height : i32,
    stride : i32,
}

struct Acci16 {
    read  : fn(i32, i32) -> i16,
    write : fn(i32, i32, i16) -> (),
}

enum BoundaryModei16 {
    Index(i32),
    Const(i16)
}

fn @nobh_center_i16 (idx: i32, lower: i32, upper: i32) -> BoundaryModei16 { BoundaryModei16::Index(idx) }
fn @clamp_lower_i16 (idx: i32, lower: i32, upper: i32) -> BoundaryModei16 {
    BoundaryModei16::Index(if idx < lower { lower } else { idx })
}
fn @clamp_upper_i16 (idx: i32, lower: i32, upper: i32) -> BoundaryModei16 {
    BoundaryModei16::Index(if idx >= upper { upper - 1 } else { idx })
}
fn @mirror_lower_i16(idx: i32, lower: i32, upper: i32) -> BoundaryModei16 {
    BoundaryModei16::Index(if idx < lower { lower + (lower - idx-1) } else { idx })
}
fn @mirror_upper_i16(idx: i32, lower: i32, upper: i32) -> BoundaryModei16 {
    BoundaryModei16::Index(if idx >= upper { upper - (idx+1 - upper) } else { idx })
}

fn @map_boundary_modei16(mode: BoundaryModei16, bh_fun: fn(i32) -> BoundaryModei16) -> BoundaryModei16 {
    match mode {
        BoundaryModei16::Index(idx) => bh_fun(idx),
        BoundaryModei16::Const(val) => mode
    }
}
fn @read_pixeli16(x: i32, y: i32, region: Region, roi: RoI, read: fn(i32, i32) -> i16, bh_lower: BoundaryFni16, bh_upper: BoundaryFni16) -> i16 {
    let lower_x = roi.o_x;
    let lower_y = roi.o_y;
    let upper_x = roi.o_x + roi.width;
    let upper_y = roi.o_y + roi.height;

    let (mode_x, mode_y) = match region {
        (row, col) => {
            let mode_x = match row {
                Boundary::Lower   => bh_lower(roi.o_x + x, lower_x, upper_x),
                Boundary::Center  => BoundaryModei16::Index(roi.o_x + x),
                Boundary::Upper   => bh_upper(roi.o_x + x, lower_x, upper_x),
                Boundary::Unknown => map_boundary_modei16(bh_lower(roi.o_x + x, lower_x, upper_x), @|idx| bh_upper(idx, lower_x, upper_x))
            };
            let mode_y = match col {
                Boundary::Lower   => bh_lower(roi.o_y + y, lower_y, upper_y),
                Boundary::Center  => BoundaryModei16::Index(roi.o_y + y),
                Boundary::Upper   => bh_upper(roi.o_y + y, lower_y, upper_y),
                Boundary::Unknown => map_boundary_modei16(bh_lower(roi.o_y + y, lower_y, upper_y), @|idx| bh_upper(idx, lower_y, upper_y))
            };
            (mode_x, mode_y)
        }
    };

    match (mode_x, mode_y) {
        (BoundaryModei16::Index(x), BoundaryModei16::Index(y)) => read(x, y),
        (BoundaryModei16::Const(c), _) => c,
        (_, BoundaryModei16::Const(c)) => c,
        _ => undef()
    }
}

// &   [i16] on CPU/AVX
// &[1][i16] on CUDA/NVVM & OpenCL
fn @get_acci16_bh(img: Imgi16, set_pixel: fn(i32, i16) -> (), get_pixel: fn(i32) -> i16, region: Region, bh_lower: BoundaryFni16, bh_upper: BoundaryFni16) -> Acci16 {
    get_acci16_bh_offset(img, set_pixel, get_pixel, 0, 0, region, bh_lower, bh_upper)
}
fn @get_acci16_bh_offset(img: Imgi16, set_pixel: fn(i32, i16) -> (), get_pixel: fn(i32) -> i16, rox: i32, roy: i32, region: Region, bh_lower: BoundaryFni16, bh_upper: BoundaryFni16) -> Acci16 {
    Acci16 {
        read  : @|x, y|    read_pixeli16(x + rox, y + roy, region, RoI { o_x : 0, o_y : 0, width : img.width, height : img.height }, @|x, y| { get_pixel(y * img.stride + x) }, bh_lower, bh_upper),
        write : @|x, y, v| set_pixel((y + roy) * img.stride + x + rox, v)
    }
}
fn @get_acci16(img: Imgi16, set_pixel: fn(i32, i16) -> (), get_pixel: fn(i32) -> i16) -> Acci16 {
    get_acci16_offset(img, set_pixel, get_pixel, 0, 0)
}
fn @get_acci16_offset(img: Imgi16, set_pixel: fn(i32, i16) -> (), get_pixel: fn(i32) -> i16, rox: i32, roy: i32) -> Acci16 {
    Acci16 {
        read  : @|x, y|    { get_pixel((y + roy) * img.stride + x + rox) },
        write : @|x, y, v| { set_pixel((y + roy) * img.stride + x + rox, v) }
    }
}

fn @new_imgi16(width: i32, height: i32, stride: i32, buf: Buffer) -> Imgi16 {
    Imgi16 { buf : buf, width : width,  height : height, stride : stride }
}

fn @alloc_imgi16(img: Imgi16, alloc: fn(i32) -> Buffer) -> Imgi16 {
    new_imgi16(img.width, img.height, img.stride, alloc(img.stride * img.height * sizeof[i16]()))
}

fn @create_imgi16(width: i32, height: i32, alloc: fn(i32) -> Buffer) -> Imgi16 {
    let stride = round_up(width * sizeof[i16](), 64) / sizeof[i16]();
    new_imgi16(width, height, stride, alloc(stride * height * sizeof[i16]()))
}

fn @copy_imgi16(src: Imgi16, dst: Imgi16) -> () {
    copy(src.buf, dst.buf, dst.stride * dst.height * sizeof[i16]());
}


// conditional swap using pointers
fn @swap_if(a: &mut i16, b: &mut i16) -> () {
    if *a > *b {
        let tmp = *a;
        *a = *b;
        *b = tmp;
    }
}

fn @qcod(x: i32, y: i32, map: Acc, img: Acci16) -> () {
    let mut arr: [i16 * 25];
    for y in unroll(0, 5) {
        for x in unroll(0, 5) {
            arr(y * 5 + x) = img.read(x, y);
        }
    }

    bitonic_sort_i16(25, @|idx| arr(idx), @|idx, val| arr(idx) = val);

    let Q1 = (arr(5)  + arr(6))  as f32 / 2.0f;
    let Q3 = (arr(18) + arr(19)) as f32 / 2.0f;

    map.write(x, y, (Q3 - Q1) / (Q3 + Q1));
}

fn @sobel(x: i32, y: i32, tmp: Acci16, img: Acci16) -> () {
    let mask_x  = [[-1,  0, +1],
                   [-2,  0, +2],
                   [-1,  0, +1]];
    let mask_y  = [[+1, +2, +1],
                   [ 0,  0,  0],
                   [-1, -2, -1]];
    let ksizeh  = 1;
    let mut g_x = 0;
    let mut g_y = 0;
    for ym in unroll(-ksizeh, ksizeh+1) {
        for xm in unroll(-ksizeh, ksizeh+1) {
            let val_x = mask_x(xm + ksizeh)(ym + ksizeh);
            let val_y = mask_y(xm + ksizeh)(ym + ksizeh);
            if val_x != 0 {
                g_x += img.read(x + xm, y + ym) as i32 * val_x;
            }
            if val_y != 0 {
                g_y += img.read(x + xm, y + ym) as i32 * val_y;
            }
        }
    }

    //let g = math.fabsf((g_x + g_y) as f32) / 4.0f as i16;
    //let g = math.sqrtf((g_x * g_x + g_y * g_y) as f32) / 5.66f as i16;
    let g = math.sqrtf((g_x * g_x + g_y * g_y) as f32) as i16;

    // thresholding - we want no gradient image in this case
    let val = if g > 150i16 { 1i16 } else { 0i16 };

    tmp.write(x, y, val);
}

fn @filter(x: i32, y: i32, tmp: Acci16, img: Acci16, map: Acc, threshold: f32, ksize: i32) -> () {
    let val = map.read(x, y);
    let ksizeh = ksize / 2;
    if val > threshold {
        let mut sum = 0i16;
        for ym in unroll(-ksizeh, ksizeh+1) {
            for xm in unroll(-ksizeh, ksizeh+1) {
                sum += img.read(x + xm, y + ym);
            }
        }
        tmp.write(x, y, (sum as f32 / ((ksize * ksize) as f32)) as i16);
    } else {
        tmp.write(x, y, img.read(x, y));
    }
}

fn @sharpen(x: i32, y: i32, out: Acci16, img: Acci16, blur: Acci16) -> () {
    let val_img  =  img.read(x, y);
    let val_blur = blur.read(x, y);
    out.write(x, y, val_img + (val_img - val_blur));
}


extern
fn sharpening(input: &[i16], output: &[i16], width: i32, height: i32) -> () {
    let img     = Imgi16 { buf : Buffer { device : 0, data : bitcast[&[i8]](input)  }, width : width, height : height, stride : width };
    let out     = Imgi16 { buf : Buffer { device : 0, data : bitcast[&[i8]](output) }, width : width, height : height, stride : width };
    let tmp     = create_imgi16(width, height, alloc_cpu);
    let map     = create_img   (width, height, alloc_cpu);
    let mask    = get_mask5([[1.0f, .. 5], .. 5]);

    fn @sharpening() -> () {
        // compute quartile coefficient of dispersion (QCOD)
        for x, y, map, img in iteration1f1i(map, img, mirror_lower_i16, mirror_upper_i16) {
            qcod(x, y, map, img);
        }

        // edge detector - TODO: use Canny
        for x, y, tmp, img in iteration2i(tmp, img, mirror_lower_i16, mirror_upper_i16) {
            sobel(x, y, tmp, img);
        }

        // counting number of non-edge pixels
        let bw_count =
            for x, y, tmp in reduce(tmp) {
                if tmp.read(x, y) == 0i16 { 0 } else { 1 }
            };
        print_string("# of non-edge pixels: ");
        print_i32(bw_count);
        print_char('\n');


        // calculate histogram
        let hist =
            for x, y, map in histogram(map) {
                (map.read(x, y) * 255.0f) as i32
            };

        // cumulative sum of the QCOD values (prefix sum)
        let sum_count = inclusive_scan(hist, 256);
        let bin =
            for value in find_position(sum_count, 256) {
                if value > bw_count { 1 } else { 0 }
            };

        // apply filter
        let threshold = bin as f32 / 256.0f;
        for x, y, tmp, img, map in iteration2i1m(tmp, img, map, mirror_lower_i16, mirror_upper_i16) {
            let ksize = 5;
            filter(x, y, tmp, img, map, threshold, ksize);
        }

        // sharpen image
        for x, y, out, img, tmp in iteration3i(out, img, tmp) {
            sharpen(x, y, out, img, tmp);
        }

        release(hist);
        release(sum_count);
    }

    sharpening();
    print_total_timing();

    release(tmp.buf);
    release(map.buf);
}
