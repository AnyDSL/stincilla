fn @qcod(x: i32, y: i32, map: Acc[f32], img: Acc[i16]) -> () {
    let mut arr: [i16 * 25];
    for y in unroll(0, 5) {
        for x in unroll(0, 5) {
            arr(y * 5 + x) = img.read(x, y);
        }
    }

    bitonic_sort(25, @|a: i16, b: i16| a > b, @|idx: i32| arr(idx), @|idx: i32, val: i16| arr(idx) = val);

    let Q1 = (arr(5)  + arr(6))  as f32 / 2:f32;
    let Q3 = (arr(18) + arr(19)) as f32 / 2:f32;

    map.write(x, y, (Q3 - Q1) / (Q3 + Q1));
}

fn @sobel(x: i32, y: i32, tmp: Acc[i16], img: Acc[i16]) -> () {
    let mask_x  = [[-1,  0, +1],
                   [-2,  0, +2],
                   [-1,  0, +1]];
    let mask_y  = [[+1, +2, +1],
                   [ 0,  0,  0],
                   [-1, -2, -1]];
    let ksizeh  = 1;
    let mut g_x = 0;
    let mut g_y = 0;
    for ym in unroll(-ksizeh, ksizeh+1) {
        for xm in unroll(-ksizeh, ksizeh+1) {
            let val_x = mask_x(xm + ksizeh)(ym + ksizeh);
            let val_y = mask_y(xm + ksizeh)(ym + ksizeh);
            if val_x != 0 {
                g_x += img.read(x + xm, y + ym) as i32 * val_x;
            }
            if val_y != 0 {
                g_y += img.read(x + xm, y + ym) as i32 * val_y;
            }
        }
    }

    //let g = math_builtins::fabs((g_x + g_y) as f32) / 4.0f as i16;
    //let g = math_builtins::sqrt((g_x * g_x + g_y * g_y) as f32) / 5.66f as i16;
    let g = math_builtins::sqrt((g_x * g_x + g_y * g_y) as f32) as i16;

    // thresholding - we want no gradient image in this case
    let val:i16 = if g > 150 { 1 } else { 0 };

    tmp.write(x, y, val);
}

fn @filter(x: i32, y: i32, tmp: Acc[i16], img: Acc[i16], map: Acc[f32], threshold: f32, ksize: i32) -> () {
    let val = map.read(x, y);
    let ksizeh = ksize / 2;
    if val > threshold {
        let mut sum = 0:i16;
        for ym in unroll(-ksizeh, ksizeh+1) {
            for xm in unroll(-ksizeh, ksizeh+1) {
                sum += img.read(x + xm, y + ym);
            }
        }
        tmp.write(x, y, (sum as f32 / ((ksize * ksize) as f32)) as i16);
    } else {
        tmp.write(x, y, img.read(x, y));
    }
}

fn @sharpen(x: i32, y: i32, out: Acc[i16], img: Acc[i16], blur: Acc[i16]) -> () {
    let val_img  =  img.read(x, y);
    let val_blur = blur.read(x, y);
    out.write(x, y, val_img + (val_img - val_blur));
}


#[export]
fn sharpening(input: &[i16], output: &[i16], width: i32, height: i32) -> () {
    let img = Img { buf = Buffer { data = bitcast[&mut[i8]](input),  size = (width * height) as i64 * sizeof[i16](), device = 0 }, width = width, height = height, stride = width };
    let out = Img { buf = Buffer { data = bitcast[&mut[i8]](output), size = (width * height) as i64 * sizeof[i16](), device = 0 }, width = width, height = height, stride = width };
    let tmp = create_img[i16](width, height, alloc_cpu);
    let map = create_img[f32](width, height, alloc_cpu);

    fn @sharpening() -> () {
        // compute quartile coefficient of dispersion (QCOD)
        for x, y, map, img in iteration1f1i(map, img, mirror_lower[i16], mirror_upper[i16]) {
            qcod(x, y, map, img);
        }

        // edge detector - TODO: use Canny
        for x, y, tmp, img in iteration2i(tmp, img, mirror_lower[i16], mirror_upper[i16]) {
            sobel(x, y, tmp, img);
        }

        // counting number of non-edge pixels
        let bw_count =
            for x, y, tmp in reduce(tmp) {
                if tmp.read(x, y) == 0 { 0 } else { 1 }
            };
        print_string("# of non-edge pixels: ");
        print_i32(bw_count);
        print_char('\n');


        // calculate histogram
        let hist =
            for x, y, map in histogram(map) {
                (map.read(x, y) * 255:f32) as i32
            };

        // cumulative sum of the QCOD values (prefix sum)
        let sum_count = inclusive_scan(hist, 256);
        let bin =
            for value in find_position(sum_count, 256) {
                if value > bw_count { 1 } else { 0 }
            };

        // apply filter
        let threshold = bin as f32 / 256:f32;
        for x, y, tmp, img, map in iteration2i1m(tmp, img, map, mirror_lower[i16], mirror_upper[i16]) {
            let ksize = 5;
            filter(x, y, tmp, img, map, threshold, ksize);
        }

        // sharpen image
        for x, y, out, img, tmp in iteration3i(out, img, tmp) {
            sharpen(x, y, out, img, tmp);
        }

        release(hist);
        release(sum_count);
    }

    sharpening();
    print_total_timing();

    release(tmp.buf);
    release(map.buf);
}
