fn apply_stencil(x: i32, y: i32, acc: Acc, mask: Mask) -> f32 {
    let mut sum = 0.0f;
    let half_range_y = mask.size_y / 2;
    let half_range_x = mask.size_x / 2;

    for j in range(-half_range_y, half_range_y+1) {
        for i in range(-half_range_x, half_range_x+1) {
            let stencil_val = mask.data(j + half_range_y, i + half_range_x);
            if stencil_val != 0.0f {
                sum += acc.read(x + i, y + j) * stencil_val;
            } else {
                // additional logic for empty stencil value
            }
        }
    }

    sum
}
fn apply_stencil_sep(x: i32, y: i32, acc: Acc, mask: MaskSep, row: bool) -> f32 {
    let mut sum = 0.0f;
    let half_range = mask.size / 2;

    for i in range(-half_range, half_range+1) {
        let stencil_val = mask.data(i + half_range);
        if stencil_val != 0.0f {
            if row {
                sum += acc.read(x + i, y) * stencil_val;
            } else {
                sum += acc.read(x, y + i) * stencil_val;
            }
        } else {
            // additional logic for empty stencil value
        }
    }

    sum
}


fn main() -> i32 {
    let width  = 4096;
    let height = 4096;
    let arr    = Img { buf : alloc_cpu(width * height * sizeof[f32]()), width : width, height : height, stride : width };
    let out    = Img { buf : alloc_cpu(width * height * sizeof[f32]()), width : width, height : height, stride : width };
    init_rand(bitcast[&mut[f32]](arr.buf.data), arr.stride, out.height);
    init_zero(bitcast[&mut[f32]](out.buf.data), out.stride, out.height);

    let mask_sep = @get_mask_sep5([ 0.070766f, 0.244460f, 0.369546f, 0.244460f, 0.070766f ]);
    let mask     = @get_mask5([[ 0.005008f, 0.017300f, 0.026151f, 0.017300f, 0.005008f ],
                               [ 0.017300f, 0.059761f, 0.090339f, 0.059761f, 0.017300f ],
                               [ 0.026151f, 0.090339f, 0.136565f, 0.090339f, 0.026151f ],
                               [ 0.017300f, 0.059761f, 0.090339f, 0.059761f, 0.017300f ],
                               [ 0.005008f, 0.017300f, 0.026151f, 0.017300f, 0.005008f ]]);

    //let lower = @wrap_const_fun(const_lower, 0.0f);
    //let upper = @wrap_const_fun(const_upper, 0.0f);
    let lower = clamp_lower;
    let upper = clamp_upper;

    let sep = true;

    if sep {
        let iteration_sep_fun = iteration_sep;          // SEP + SS
        //let iteration_sep_fun = iteration_sep_bounds;   // SEP + SS + BH
        //let iteration_sep_fun = iteration_sep_advanced; // SEP + SS + SM

        for x, y, out_acc, arr_acc, mask, is_row in @iteration_sep_fun(out, arr, mask_sep, mask_sep, lower, upper) {
            out_acc.write(x, y, apply_stencil_sep(x, y, arr_acc, mask, is_row));
        }
    } else {
        let iteration_fun = iteration;                  // SS
        //let iteration_fun = iteration_bounds;           // SS + BH
        //let iteration_fun = iteration_advanced;         // SS + SM

        for x, y, out_acc, arr_acc, mask in @iteration_fun(out, arr, mask, lower, upper) {
            out_acc.write(x, y, apply_stencil(x, y, arr_acc, mask));
        }
    }
    print_total_timing();

    fn reference() -> i32 {
        let mut passed = 0;
        let arr_acc = get_acc_bh(arr, 10, lower, upper);
        let out_acc = get_acc(out);
        for y in $range(0, out.height) {
            for x in range(0, out.width) @{
                let ref = apply_stencil(x, y, arr_acc, mask);
                let mut diff = ref - out_acc.read(x, y);
                if diff < 0.0f  { diff = -diff; }
                if diff > 0.01f { passed = 42; }
            }
        }
        if passed == 0 {
            print_string("Test PASSED!\n");
        } else {
            print_string("Test FAILED!\n");
        }
        passed
    }

    let result = @reference();

    release(arr.buf);
    release(out.buf);

    result
}
