#[export]
fn main() -> i32 {
    let width  = 4096;
    let height = 4096;
    let arr    = create_img(width, height, alloc_cpu);
    let out    = create_img(width, height, alloc_cpu);
    init_rand(bitcast[&mut[f32], &mut[i8]](arr.buf.data), arr.stride, out.height);
    init_zero(bitcast[&mut[f32], &mut[i8]](out.buf.data), out.stride, out.height);

    let mask_sep = get_mask_sep5([ 0.070766:f32, 0.244460:f32, 0.369546:f32, 0.244460:f32, 0.070766:f32 ]);
    let mask     = get_mask5([[ 0.005008:f32, 0.017300:f32, 0.026151:f32, 0.017300:f32, 0.005008:f32 ],
                              [ 0.017300:f32, 0.059761:f32, 0.090339:f32, 0.059761:f32, 0.017300:f32 ],
                              [ 0.026151:f32, 0.090339:f32, 0.136565:f32, 0.090339:f32, 0.026151:f32 ],
                              [ 0.017300:f32, 0.059761:f32, 0.090339:f32, 0.059761:f32, 0.017300:f32 ],
                              [ 0.005008:f32, 0.017300:f32, 0.026151:f32, 0.017300:f32, 0.005008:f32 ]]);

    //let lower = wrap_const_fun(const_lower, 0:f32);
    //let upper = wrap_const_fun(const_upper, 0:f32);
    let lower = clamp_lower;
    let upper = clamp_upper;

    let sep = true;

    if sep {
        let iteration_sep_fun = iteration_sep;          // SEP + SS
        //let iteration_sep_fun = iteration_sep_bounds;   // SEP + SS + BH
        //let iteration_sep_fun = iteration_sep_advanced; // SEP + SS + SM

        for _math, x, y, out_acc, arr_acc, mask, is_row in iteration_sep_fun(math, out, arr, mask_sep, mask_sep, lower, upper) {
            out_acc.write(x, y, apply_stencil_sep(x, y, arr_acc, mask, is_row));
        }
    } else {
        let iteration_fun = iteration;                  // SS
        //let iteration_fun = iteration_bounds;           // SS + BH
        //let iteration_fun = iteration_advanced;         // SS + SM

        for _math, x, y, out_acc, accs in iteration_fun(math, out, make_img_list1(arr, (mask.size_x / 2, mask.size_y / 2)), lower, upper) {
            out_acc.write(x, y, apply_stencil(x, y, accs.get(0), mask));
        }
    }
    print_total_timing();

    fn reference() -> i32 {
        let mut passed = 0;
        let arr_acc = get_acc_bh(arr, |idx, val| { bitcast[&mut[f32], &mut[i8]](arr.buf.data)(idx) = val }, |idx| bitcast[&[f32], &mut[i8]](arr.buf.data)(idx), (Boundary::Unknown, Boundary::Unknown), lower, upper);
        let out_acc = get_acc   (out, |idx, val| { bitcast[&mut[f32], &mut[i8]](out.buf.data)(idx) = val }, |idx| bitcast[&[f32], &mut[i8]](out.buf.data)(idx));
        for y in range(0, out.height) {
            for x in range(0, out.width) {
                let ref = apply_stencil(x, y, arr_acc, mask);
                let mut diff = ref - out_acc.read(x, y);
                if diff < 0:f32    { diff = -diff; }
                if diff > 0.01:f32 { passed = 42; }
            }
        }
        if passed == 0 {
            print_string("Test PASSED!\n");
        } else {
            print_string("Test FAILED!\n");
        }
        passed
    }

    let result = reference();

    release(arr.buf);
    release(out.buf);

    result
}
