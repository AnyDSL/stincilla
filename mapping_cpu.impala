static Region2D    = [ 0, 1, 2,
                       3, 4, 5,
                       6, 7, 8 ];
static Region2DCol = [ 1, 4, 7 ];
static Region2DRow = [ 3, 4, 5 ];

fn get_device_copy(img: Img) -> Img { img }
fn release_device_copy(img: Img) -> () { }

fn set_pixel_fn(img: Img) -> fn(i32, f32) -> () { |idx, val| bitcast[&mut[f32]](img.buf.data)(idx) = val }
fn get_pixel_fn(img: Img) -> fn(i32) -> f32 { |idx| bitcast[&[f32]](img.buf.data)(idx) }
fn set_pixel_memory_fn(buf: Buffer) -> fn(i32, f32) -> () { |idx, val| bitcast[&mut[f32]](buf.data)(idx) = val }
fn get_pixel_memory_fn(buf: Buffer) -> fn(i32) -> f32 { |idx| bitcast[&[f32]](buf.data)(idx) }

fn iteration_point(math: Intrinsics, out: Img, body: fn(Intrinsics, i32, i32, Acc) -> ()) -> () {
    let out_acc = get_acc(out, set_pixel_fn(out), get_pixel_fn(out));

    for benchmark_cpu() {
        for y in $outer_loop(0, out.height) {
            for x in inner_loop(0, out.width) @{
                body(math, x, y, out_acc);
            }
        }
    }
}

fn iteration(math: Intrinsics, out: Img, arr: Img, mask: Mask, bh_lower: BoundaryFn, bh_upper: BoundaryFn, body: StencilFn) -> () {
    let out_acc = get_acc(out, set_pixel_fn(out), get_pixel_fn(out));
    let arr_acc = get_acc_bh(arr, set_pixel_fn(arr), get_pixel_fn(arr), 10, bh_lower, bh_upper);

    for benchmark_cpu() {
        for y in $outer_loop(0, out.height) {
            for x in inner_loop(0, out.width) @{
                body(math, x, y, out_acc, arr_acc, mask);
            }
        }
    }
}

fn iteration_bounds(math: Intrinsics, out: Img, arr: Img, mask: Mask, bh_lower: BoundaryFn, bh_upper: BoundaryFn, body: StencilFn) -> () {
    // compute the number of vector strides for boundary handling
    let bhy = mask.size_y / 2;
    let bhx = round_up(mask.size_x / 2, get_vector_length());

    // (minx, maxx, miny, maxy)
    let width  = out.width;
    let height = out.height;
    let Bounds2D = [
        (0          , bhx        , 0           , bhy),
        (bhx        , width - bhx, 0           , bhy),
        (width - bhx, width      , 0           , bhy),

        (0          , bhx        , bhy         , height - bhy),
        (bhx        , width - bhx, bhy         , height - bhy),
        (width - bhx, width      , bhy         , height - bhy),

        (0          , bhx        , height - bhy, height),
        (bhx        , width - bhx, height - bhy, height),
        (width - bhx, width      , height - bhy, height)
    ];

    for benchmark_cpu() {
        for iter in @range(0, 9) {
            let bounds = Bounds2D(iter);
            let region = Region2D(iter);
            let arr_acc = get_acc_bh(arr, set_pixel_fn(arr), get_pixel_fn(arr), region, bh_lower, bh_upper);
            let out_acc = get_acc(out, set_pixel_fn(out), get_pixel_fn(out));
            //let outer_loop_fun = if region == 4 { outer_loop } else { range };
            // gets slower when computed in parallel

            for y in $range(bounds(2), bounds(3)) {
                for x in inner_loop(bounds(0), bounds(1)) @{
                    body(math, x, y, out_acc, arr_acc, mask);
                }
            }
        }
    }
}

struct CacheSizes {
    sizes : [i32 * 3],
    count : i32,
}

fn tiled_loop(xl: i32, xu: i32, yl: i32, yu: i32, mask: Mask, img: Img, body: fn(i32, i32) -> ()) -> () {
    let debug_tiling = false;
    fn get_tile_dims(mask: Mask, img: Img) -> (i32, i32) {
        // TODO make this dimension independent, currently only 2D is supported
        // TODO get cache information from machine/compiler/somewhere else

        let caches = CacheSizes {sizes: [32*1024, 256*1024, 20*1024*1024], count: 3}; // in bytes
        let element_size = 4; // TODO make this dynamic based on used type. templates?

        // Analyze stencil:
        fn distances(idx: (i32, i32), last_idx: (i32, i32), sum_dist: (i32, i32), max_dist: (i32, i32)) -> ((i32, i32), (i32, i32)) {
            if idx(0) >= mask.size_x {
                // end of mask line
                distances((0, idx(1)+1), last_idx, sum_dist, max_dist)
            } else if idx(1) >= mask.size_y {
                // end of stencil mask
                (sum_dist, max_dist)
            } else if mask.data(idx(0), idx(1)) == 0.0f {
                // ignore zero mask values
                distances((idx(0)+1, idx(1)), last_idx, sum_dist, max_dist)
            } else if last_idx(0) == -1 {
                // first non-zero mask value found
                // last_idx = idx
                distances((idx(0)+1, idx(1)), idx, sum_dist, max_dist)
            } else {
                // calculate distance and update sum and max
                let dist = (idx(0) - last_idx(0),
                            idx(1) - last_idx(1));
                let mut new_max_dist = max_dist;
                if (dist(1) > max_dist(1) ||
                    (dist(1) == max_dist(1) && dist(0) > max_dist(0))) {
                    new_max_dist = dist;
                }
                distances((idx(0)+1, idx(1)), idx,
                          (sum_dist(0)+dist(0), sum_dist(1)+dist(1)),
                          new_max_dist)
            }
        }
        let (sum_distances, max_distance) = distances((0,0), (-1,-1), (0,0), (0,0));

        pe_info("sum", sum_distances);
        pe_info("max", max_distance);

        if debug_tiling {
            print_string(" (max, sum) = ((");
            print_int(max_distance(0));
            print_string(", ");
            print_int(max_distance(1));
            print_string("), (");
            print_int(sum_distances(0));
            print_string(", ");
            print_int(sum_distances(1));
            print_string(")) = ");
            print_int(max_distance(0)+sum_distances(0)+(max_distance(1)+sum_distances(1))*img.width);
            print_string("\n");
        }

        fn cache_tile(cache_lvl: i32, max_tile_size: i32) -> i32 {
            let min_loop_length = 200; // controls when loop should be blocked

            if cache_lvl < 0 {
                max_tile_size
            } else {
                let proposed_tile_size = (((caches.sizes(cache_lvl) / element_size
                                            - max_distance(0) - sum_distances(0)) /
                                            (max_distance(1)+sum_distances(1))
                                            * 90 / 100)>>6)<<6;
                if proposed_tile_size < max_tile_size && proposed_tile_size > min_loop_length {
                    cache_tile(cache_lvl - 1, proposed_tile_size)
                } else {
                    cache_tile(cache_lvl - 1, max_tile_size)
                }
            }
        }
        let tile_size = cache_tile(caches.count - 1, img.width);

        if debug_tiling {
            pe_info("tile_size", tile_size);
            print_string("\nRecommended inner tiling: ");
            print_int(tile_size);
            print_string("\n");
        }

        (tile_size, img.height)
    }

    let x_upper = xu;
    let x_lower = xl;
    let y_upper = yu;
    let y_lower = yl;

    fn tile(cur_lvl: i32, xl: i32, xu: i32, yl: i32, yu: i32) -> () {
        if debug_tiling {
            print_string("tile(");
            print_int(cur_lvl);
            print_string(", ");
            print_int(xl);
            print_string(", ");
            print_int(xu);
            print_string(", ");
            print_int(yl);
            print_string(", ");
            print_int(yu);
            print_string(")\n");
        }

        let (xtile_dim, ytile_dim) = get_tile_dims(mask, img);

        pe_info("tile dim (x, y)", (xtile_dim, ytile_dim));
        pe_info("x (lower, upper)", (xl, xu));
        pe_info("y (lower, upper)", (yl, yu));

        if cur_lvl == 0 {
             // we always start from 0 to align tiles, no matter what boundary is skipped over
            for x in range_step(0, xu, xtile_dim) {
                for y in range_step(0, yu, ytile_dim) {
                    tile(cur_lvl + 1,
                         max(x, xl), min(x + xtile_dim, xu),
                         max(y, yl), min(y + ytile_dim, yu));
                }
            }
        } else {
            for y in $range(yl, yu) {
                for x in range(xl, xu) @{
                    body(x, y);
                }
            }
        }
    }

    tile(0, xl, xu, yl, yu)
}

fn iteration_advanced(math: Intrinsics, out: Img, arr: Img, mask: Mask, bh_lower: BoundaryFn, bh_upper: BoundaryFn, body: StencilFn) -> () {
    // compute the number of vector strides for boundary handling
    let bhy = mask.size_y / 2;
    let bhx = round_up(mask.size_x / 2, get_vector_length());

    // (minx, maxx, miny, maxy)
    let width  = out.width;
    let height = out.height;
    let Bounds2D = [
        (0          , bhx        , 0           , bhy),
        (bhx        , width - bhx, 0           , bhy),
        (width - bhx, width      , 0           , bhy),

        (0          , bhx        , bhy         , height - bhy),
        (bhx        , width - bhx, bhy         , height - bhy),
        (width - bhx, width      , bhy         , height - bhy),

        (0          , bhx        , height - bhy, height),
        (bhx        , width - bhx, height - bhy, height),
        (width - bhx, width      , height - bhy, height)
    ];

    for benchmark_cpu() {
        for iter in @range(0, 9) {
            let bounds = Bounds2D(iter);
            let region = Region2D(iter);
            let arr_acc = get_acc_bh(arr, set_pixel_fn(arr), get_pixel_fn(arr), region, bh_lower, bh_upper);
            let out_acc = get_acc(out, set_pixel_fn(out), get_pixel_fn(out));
            //let outer_loop_fun = if region == 4 { outer_loop } else { range };
            // gets slower when computed in parallel

            if region == 4 {
                @tiled_loop(bounds(0), bounds(1), bounds(2), bounds(3), mask, arr, |x, y| body(math, x, y, out_acc, arr_acc, mask));
            } else {
                for y in $range(bounds(2), bounds(3)) {
                    for x in inner_loop(bounds(0), bounds(1)) @{
                        body(math, x, y, out_acc, arr_acc, mask);
                    }
                }
            }
        }
    }
}

fn iteration_sep(math: Intrinsics, out: Img, arr: Img, mask_row: MaskSep, mask_col: MaskSep, bh_lower: BoundaryFn, bh_upper: BoundaryFn, body: StencilSepFn) -> () {
    // allocate temporary array
    let tmp = get_img(alloc_cpu(out.width * out.height * sizeof[f32]()), out.width, out.height);
    let out_acc   = get_acc(out, set_pixel_fn(out), get_pixel_fn(out));
    let tmp_acc_w = get_acc(tmp, set_pixel_fn(tmp), get_pixel_fn(tmp));
    let tmp_acc_r = get_acc_bh(tmp, set_pixel_fn(tmp), get_pixel_fn(tmp), 10, bh_lower, bh_upper);
    let arr_acc   = get_acc_bh(arr, set_pixel_fn(arr), get_pixel_fn(arr), 10, bh_lower, bh_upper);

    for benchmark_cpu() {
        for y in $outer_loop(0, out.height) {
            for x in inner_loop(0, out.width) @{
                let is_row = false;
                body(math, x, y, tmp_acc_w, arr_acc, mask_col, is_row);
            }
        }

        for y in $outer_loop(0, out.height) {
            for x in inner_loop(0, out.width) @{
                let is_row = true;
                body(math, x, y, out_acc, tmp_acc_r, mask_row, is_row);
            }
        }
    }

    release(tmp.buf);
}

fn iteration_sep_bounds(math: Intrinsics, out: Img, arr: Img, mask_row: MaskSep, mask_col: MaskSep, bh_lower: BoundaryFn, bh_upper: BoundaryFn, body: StencilSepFn) -> () {
    // allocate temporary array
    let tmp = get_img(alloc_cpu(out.width * out.height * sizeof[f32]()), out.width, out.height);

    let bhy = mask_col.size / 2;
    let bhx = round_up(mask_row.size / 2, get_vector_length());

    let Bounds2DCol = [
        (0               , bhy),
        (bhy             , out.height - bhy),
        (out.height - bhy, out.height)
    ];

    let Bounds2DRow = [
        (0              , bhx),
        (bhx            , out.width - bhx),
        (out.width - bhx, out.width)
    ];

    for benchmark_cpu() {
        for iter in @range(0, 3) {
            let bounds = Bounds2DCol(iter);
            let region = Region2DCol(iter);
            let arr_acc = get_acc_bh(arr, set_pixel_fn(arr), get_pixel_fn(arr), region, bh_lower, bh_upper);
            let tmp_acc = get_acc(tmp, set_pixel_fn(tmp), get_pixel_fn(tmp));
            let outer_loop_fun = if region == 4 { outer_loop } else { range };
            for y in $outer_loop_fun(bounds(0), bounds(1)) {
                for x in inner_loop(0, out.width) @{
                    let is_row = false;
                    body(math, x, y, tmp_acc, arr_acc, mask_col, is_row);
                }
            }
        }

        for iter in @range(0, 3) {
            let bounds = Bounds2DRow(iter);
            let region = Region2DRow(iter);
            let tmp_acc = get_acc_bh(tmp, set_pixel_fn(tmp), get_pixel_fn(tmp), region, bh_lower, bh_upper);
            let out_acc = get_acc(out, set_pixel_fn(out), get_pixel_fn(out));
            let outer_loop_fun = if region == 4 { outer_loop } else { range };
            for y in $outer_loop_fun(0, out.height) {
                for x in inner_loop(bounds(0), bounds(1)) @{
                    let is_row = true;
                    body(math, x, y, out_acc, tmp_acc, mask_row, is_row);
                }
            }
        }
    }

    release(tmp.buf);
}

fn iteration_sep_advanced(math: Intrinsics, out: Img, arr: Img, mask_row: MaskSep, mask_col: MaskSep, bh_lower: BoundaryFn, bh_upper: BoundaryFn, body: StencilSepFn) -> () {
    let unroll = 1;
    let bhy = round_up(mask_col.size / 2, unroll);
    let bhx = round_up(mask_row.size / 2, get_vector_length());

    let Bounds2DCol = [
        (0               , bhy),
        (bhy             , out.height - bhy),
        (out.height - bhy, out.height)
    ];

    let Bounds2DRow = [
        (0              , bhx),
        (bhx            , out.width - bhx),
        (out.width - bhx, out.width)
    ];

    for benchmark_cpu() {
        for iter_col in @range(0, 3) {
            let bounds_col = Bounds2DCol(iter_col);
            let region_col = Region2DCol(iter_col);
            let outer_col  = if iter_col == 1 { outer_loop_step } else { range_step };
            let inner_col  = if iter_col == 1 { inner_loop } else { range };
            for y in $outer_col(bounds_col(0), bounds_col(1), unroll) @{
                // allocate temporary array per thread
                let tmp = alloc_cpu(out.width * unroll * sizeof[f32]());

                for x in $inner_col(0, out.width) @{
                    let is_row = false;

                    // index space: cache line
                    let arr_acc = get_acc_bh_offset(arr, set_pixel_fn(arr), get_pixel_fn(arr), 0, y, region_col, bh_lower, bh_upper);
                    let tmp_acc = get_acc_memory(set_pixel_memory_fn(tmp), get_pixel_memory_fn(tmp), out.width, unroll);
                    for i in range(0, unroll) {
                        body(math, x, i, tmp_acc, arr_acc, mask_col, is_row);
                    }
                }
                for iter_row in range(0, 3) {
                    let bounds_row = Bounds2DRow(iter_row);
                    let region_row = Region2DRow(iter_row);
                    let inner_row  = if iter_row == 1 { inner_loop } else { range };
                    for x in $inner_row(bounds_row(0), bounds_row(1)) @{
                        let is_row = true;

                        // index space: cache line
                        let tmp_acc = get_acc_bh_memory(set_pixel_memory_fn(tmp), get_pixel_memory_fn(tmp), out.width, unroll, region_row, bh_lower, bh_upper);
                        let out_acc = get_acc_offset(out, set_pixel_fn(out), get_pixel_fn(out), 0, y);
                        for i in range(0, unroll) {
                            body(math, x, i, out_acc, tmp_acc, mask_row, is_row);
                        }
                    }
                }

                release(tmp);
            }
        }
    }
}
