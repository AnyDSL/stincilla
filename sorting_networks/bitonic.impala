// bitonic sorting network for n not a power of 2
fn bitonic_sort(length: i32, read: fn(i32) -> f32, write: fn(i32, f32) -> ()) -> () {
    let ascending = true; // sorting direction

    fn greatest_power_of_two_less_than(n: i32) -> i32 {
        let mut k = 1;
        while k < n {
            k <<= 1;
        }
        k >> 1
    }

    fn compare_and_swap(i: i32, j: i32, dir: bool) -> () {
        if read(i) > read(j) == dir {
            let tmp = read(i);
            write(i, read(j));
            write(j, tmp);
        }
    }

    fn sort(lo: i32, n: i32, dir: bool) -> () {
        if n > 1 {
            let m = n / 2;
            sort(lo, m, !dir);
            sort(lo+m, n-m, dir);
            merge(lo, n, dir);
        }
    }

    fn merge(lo: i32, n: i32, dir: bool) -> () {
        if n > 1 {
            let m = greatest_power_of_two_less_than(n);
            for i in range(lo, lo+n-m) {
                compare_and_swap(i, i+m, dir);
            }
            merge(lo, m, dir);
            merge(lo+m, n-m, dir);
        }
    }

    sort(0, length, ascending)
}

fn range_step(lower: i32, upper: i32, step: i32, body: fn(i32) -> ()) -> () {
    if lower < upper {
        body(lower);
        range_step(lower+step, upper, step, body, return)
    }
}
fn range(lower: i32, upper: i32, body: fn(i32) -> ()) -> () { range_step(lower, upper, 1, body) }

extern
fn test() -> () {
    let mut arr: [f32 * 3];
    bitonic_sort(3, |idx| arr(idx), |idx, val| arr(idx) = val)
}

