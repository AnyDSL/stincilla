// odd-even merge sort works only for power of two
fn @oddeven_merge_sort(length: i32, read: fn(i32) -> f32, write: fn(i32, f32) -> ()) -> () {
    fn @compare_and_swap(i: i32, j: i32) -> () {
        //pe_info("compare(i,j)", (i, j));
        if read(i) > read(j) {
            let tmp = read(i);
            write(i, read(j));
            write(j, tmp);
        }
    }

    fn @(?lo & ?n & ?r) oddeven_merge(lo: i32, n: i32, r: i32) -> () {
        let m = r * 2;
        if m < n {
            oddeven_merge(lo, n, m);        // even subsequence
            oddeven_merge(lo + r, n, m);    // odd subsequence
            for i in unroll_step(lo + r, lo + n - r, m) {
                compare_and_swap(i, i + r);
            }
        } else {
            compare_and_swap(lo, lo + r);
        }
    }

    fn @(?lo & ?n) oddeven_merge_sort_range(lo: i32, n: i32) -> () {
        if n > 1 {
            let m = n / 2;
            oddeven_merge_sort_range(lo, m);
            oddeven_merge_sort_range(lo + m, m);
            oddeven_merge(lo, n, 1);
        }
    }

    oddeven_merge_sort_range(0, length);
}

#[export]
fn test(input: &[f32]) -> f32 {
    let length = 4;

    fn @median() -> f32 {
        let mut arr: [f32 * 4];
        for i in unroll(0, length) {
            arr(i) = input(i);
        }

        oddeven_merge_sort(length, @|idx| arr(idx), @|idx, val| arr(idx) = val);
        print_total_timing();

        // return median
        arr((length - 1) / 2)
    }

    median()
}
