fn init_zero(arr: &mut[pixel_t], width: i32, height: i32) -> () {
    for i in range(0, width*height) {
        arr(i) = 0 as pixel_t;
    }
}
fn init_rand(arr: &mut[pixel_t], width: i32, height: i32) -> () {
    for y in range(0, height) {
        for x in range(0, width) {
            arr(y*width + x) = (random_val_f32() * 1024f) as pixel_t;
        }
    }
}

fn @min(a: i32, b: i32) -> i32 { if a < b { a } else { b } }
fn @max(a: i32, b: i32) -> i32 { if a > b { a } else { b } }
fn @abs(a: i32) -> i32 { if a < 0 { -a } else { a } }

// nearest multiple of num
fn @round_up(num: i32, multiple: i32) -> i32 { ((num + multiple - 1) / multiple) * multiple }
fn @round_down(num: i32, multiple: i32) -> i32 { (num / multiple) * multiple }

static mut total_cpu_timing = 0i64;
static mut total_gpu_timing = 0i64;
static mut total_fpga_timing = 0i64;
static mut total_host_timing = 0i64;

fn @benchmark(get_time: fn() -> i64, num_iter: i32, body: fn() -> (), sync: fn() -> ()) -> i64 {
    let times_buf = alloc_cpu(num_iter * sizeof[i64]());
    let times = bitcast[&mut[i64]](times_buf.data);
    for i in range(0, num_iter) {
        let start = get_time();
        body();
        sync();
        times(i) = get_time() - start;
    }
    sort_i64(num_iter, times);
    print_string("Timing: ");
    print_f64(times(num_iter/2) as f64 / 1000.0);
    print_string(" | ");
    print_f64(times(0) as f64 / 1000.0);
    print_string(" | ");
    print_f64(times(num_iter-1) as f64 / 1000.0);
    print_string(" (median(");
    print_i32(num_iter);
    print_string(") | minimum | maximum) ms\n");
    let median = times(num_iter/2);
    release(times_buf);
    median
}

static iter_cpu  = 27;
static iter_gpu  =  7;
static iter_fpga =  5;
static num_host_iter = 5;
fn @benchmark_cpu(                   body: fn() -> ()) -> () { total_cpu_timing  += benchmark(get_micro_time,  iter_cpu,  body, ||) }
fn @benchmark_gpu(gpu: Accelerator,  body: fn() -> ()) -> () { total_gpu_timing  += benchmark(get_kernel_time, iter_gpu,  body, gpu.sync) }
fn @benchmark_fpga(sync: fn() -> (), body: fn() -> ()) -> () {
    let start = get_micro_time();
    body();
    sync();
    let kernel_time = get_micro_time() - start;
    total_fpga_timing += kernel_time;
}
fn @benchmark_host(num_iter: i32, body: fn() -> ()) -> () {
    // sum of kernel times
    let total_times_buf = alloc_cpu((num_iter + 1) * sizeof[i64]());
    let total_times = bitcast[&mut[i64]](total_times_buf.data);
    // total host time
    let times_buf = alloc_cpu((num_iter + 1) * sizeof[i64]());
    let times = bitcast[&mut[i64]](times_buf.data);
    for i in range(0, num_iter + 1) {
        total_fpga_timing = 0i64;
        let start = get_micro_time();
        body();
        times(i) = get_micro_time() - start;
        total_times(i) = total_fpga_timing;
    }
    // sum of kernel times
    sort_i64(num_iter + 1, times);
    print_string("Timing: ");
    print_f64(total_times(1 + num_iter/2) as f64 / 1000.0);
    print_string(" | ");
    print_f64(total_times(1) as f64 / 1000.0);
    print_string(" | ");
    print_f64(total_times(num_iter-1) as f64 / 1000.0);
    print_string(" (median(");
    print_i32(num_iter);
    print_string(") | minimum | maximum) ms\n");
    release(total_times_buf);
    // total host time
    sort_i64(num_iter + 1, times);
    print_string("End-to-End Host Time: ");
    print_f64(times(1 + num_iter/2) as f64 / 1000.0);
    print_string(" | ");
    print_f64(times(1) as f64 / 1000.0);
    print_string(" | ");
    print_f64(times(num_iter-1) as f64 / 1000.0);
    print_string(" (median(");
    print_i32(num_iter);
    print_string(") | minimum | maximum) ms\n");
    release(times_buf);
    total_fpga_timing = total_times(1 + num_iter/2);
}



fn print_total_timing() -> () {
    print_string("Total timing for cpu / gpu / fpga: ");
    print_f64(total_cpu_timing as f64 / 1000.0);
    print_string(" / ");
    print_f64(total_gpu_timing as f64 / 1000.0);
    print_string(" / ");
    print_f64(total_fpga_timing as f64 / 1000.0);
    print_string(" ms\n")
}

fn @(?num) sort_i64(num: i32, arr: &mut[i64]) -> () {
    // insertion sort
    for i in range(1, num) {
        let x = arr(i);
        let mut j = i;
        while j > 0 && arr(j-1) > x {
            arr(j) = arr(j-1);
            j = j - 1;
        }
        arr(j) = x;
    }
}
fn @(?num) sort_f32(num: i32, arr: &mut[f32]) -> () {
    // insertion sort
    for i in range(1, num) {
        let x = arr(i);
        let mut j = i;
        while j > 0 && arr(j-1) > x {
            arr(j) = arr(j-1);
            j = j - 1;
        }
        arr(j) = x;
    }
}
