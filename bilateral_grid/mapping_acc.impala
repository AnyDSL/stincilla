fn img_read_fn(img: Buffer, width: i32) -> fn(i32, i32) -> f32 { |x: i32, y: i32| bitcast[&[1][f32]](img.data)(y * width + x) }
fn img_write_fn(img: Buffer, width: i32) -> fn(i32, i32, f32) -> () { |x: i32, y: i32, v: f32| bitcast[&mut[1][f32]](img.data)(y * width + x) = v }
fn grid_read_fn(width: i32, bins: i32, padding: i32, buf: Buffer) -> fn(i32, i32, i32, i32) -> f32 {
    |x, y, z, c| bitcast[&[1][f32]](buf.data)(2 * ((y * width + x) * bins + z + padding) + c)
}
fn grid_write_fn(width: i32, bins: i32, padding: i32, buf: Buffer) -> fn(i32, i32, i32, i32, f32) -> () {
    |x, y, z, c, v| { bitcast[&mut[1][f32]](buf.data)(2 * ((y * width + x) * bins + z + padding) + c) = v }
}
fn get_device_copy(host: &[f32], size: i32) -> Buffer {
    let img_gpu = acc.alloc(acc.dev(), size);
    let img_cpu = Buffer { device : 0, data : bitcast[&[i8]](host) };
    copy(img_cpu, img_gpu, size);
    img_gpu
}

fn copy_to_host(host: &[f32], img_gpu: Buffer, size: i32) -> () {
    let img_cpu = Buffer { device : 0, data : bitcast[&[i8]](host) };
    copy(img_gpu, img_cpu, size);
}

fn release_device_copy(img: Buffer) -> () {
    release(img)
}

fn alloc_grid(size: i32) -> Buffer { acc.alloc(acc.dev(), size) }

fn iteration_grid(bgrid: Grid, body: fn(i32, i32) -> ()) -> () {
    let unroll = 1;
    let grid   = (bgrid.width(), bgrid.height() / unroll, 1);
    let block  = (32, 4, 1);

    for benchmark_acc() {
        with acc.exec(acc.dev(), grid, block) @{
            let gid_x = acc.gidx();
            let gid_y = acc.tidy() + acc.bdimy() * acc.bidy() * unroll;

            for i in range(0, unroll) {
                body(gid_x, gid_y + i * acc.bdimy());
            }
        }
    }
}
fn iteration_space(width: i32, height: i32, body: fn(i32, i32) -> ()) -> () {
    let unroll = 1;
    let grid   = (width, height / unroll, 1);
    let block  = (32, 4, 1);

    for benchmark_acc() {
        with acc.exec(acc.dev(), grid, block) @{
            let gid_x = acc.gidx();
            let gid_y = acc.tidy() + acc.bdimy() * acc.bidy() * unroll;

            for i in range(0, unroll) {
                body(gid_x, gid_y + i * acc.bdimy());
            }
        }
    }
}
