fn @img_read_fn(img: Buffer, width: i32) -> fn(i32, i32) -> f32 { |x: i32, y: i32| bitcast[&[1][f32]](img.data)(y * width + x) }
fn @img_write_fn(img: Buffer, width: i32) -> fn(i32, i32, f32) -> () { |x: i32, y: i32, v: f32| bitcast[&mut[1][f32]](img.data)(y * width + x) = v }
fn @grid_read_fn(width: i32, bins: i32, padding: i32, buf: Buffer) -> fn(i32, i32, i32, i32) -> f32 {
    @|x, y, z, c| bitcast[&[1][f32]](buf.data)(2 * ((y * width + x) * bins + z + padding) + c)
}
fn @grid_write_fn(width: i32, bins: i32, padding: i32, buf: Buffer) -> fn(i32, i32, i32, i32, f32) -> () {
    @|x, y, z, c, v| { bitcast[&mut[1][f32]](buf.data)(2 * ((y * width + x) * bins + z + padding) + c) = v }
}
fn @get_device_copy(host: &[f32], size: i32) -> Buffer {
    let acc = accelerator(device_id);
    let img_gpu = acc.alloc(size);
    let img_cpu = Buffer { data : bitcast[&[i8]](host), size : size as i64, device : 0 };
    copy(img_cpu, img_gpu);
    img_gpu
}

fn @copy_to_host(host: &[f32], img_gpu: Buffer, size: i32) -> () {
    let img_cpu = Buffer { data : bitcast[&[i8]](host), size : size as i64, device : 0 };
    copy(img_gpu, img_cpu);
}

fn @release_device_copy(img: Buffer) -> () {
    release(img)
}

fn @alloc_grid(size: i32) -> Buffer {
    let acc = accelerator(device_id);
    acc.alloc(size)
}

fn @iteration_grid(bgrid: Grid, body: fn(i32, i32) -> ()) -> () {
    let acc = accelerator(device_id);
    let coarsening_factor = 1;
    let grid  = (bgrid.width(), bgrid.height() / coarsening_factor, 1);
    let block = (32, 4, 1);

    for benchmark_acc(acc) {
        for work_item in acc.exec(grid, block) {
            let bdim_y = work_item.bdimy();
            let gid_x  = work_item.tidx() + work_item.bdimx() * work_item.bidx();
            let gid_y  = work_item.tidy() + work_item.bdimy() * work_item.bidy() * coarsening_factor;

            for i in unroll(0, coarsening_factor) {
                @@body(gid_x, gid_y + i * bdim_y);
            }
        }
    }
}

fn @iteration_space(width: i32, height: i32, body: fn(i32, i32) -> ()) -> () {
    let acc = accelerator(device_id);
    let coarsening_factor = 1;
    let grid  = (width, height / coarsening_factor, 1);
    let block = (32, 4, 1);

    for benchmark_acc(acc) {
        for work_item in acc.exec(grid, block) {
            let bdim_y = work_item.bdimy();
            let gid_x  = work_item.tidx() + work_item.bdimx() * work_item.bidx();
            let gid_y  = work_item.tidy() + work_item.bdimy() * work_item.bidy() * coarsening_factor;

            for i in unroll(0, coarsening_factor) {
                @@body(gid_x, gid_y + i * bdim_y);
            }
        }
    }
}
