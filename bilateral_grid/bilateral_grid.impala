/*
 * Bilateral Grid
 *
 * Real-time Edge-Aware Image Processing with the Bilateral Grid
 * J. Chen, S. Paris, F. Durand - ACM Transactions on Graphics (TOG), 2007
 *
 */

struct Grid {
    sigma_s : fn() -> i32,
    sigma_r : fn() -> f32,
    padding : fn() -> i32,
    width   : fn() -> i32,
    height  : fn() -> i32,
    bins    : fn() -> i32,
    read    : fn(i32, i32, i32, i32) -> f32,
    write   : fn(i32, i32, i32, i32, f32) -> (),
}
fn @clamp_f32(v: f32, l: f32, u: f32) -> f32 { if v < l { l } else { if v >= u { u     } else { v } } }
fn @clamp_i32(v: i32, l: i32, u: i32) -> i32 { if v < l { l } else { if v >= u { u - 1 } else { v } } }


fn create_grid(x: i32, y: i32, grid: Grid, image: fn(i32, i32) -> f32) -> () {
    for ry in range(0, grid.sigma_s()+1) {
        for rx in range(0, grid.sigma_s()+1) {
            let mut val = image(x * grid.sigma_s() + rx - grid.sigma_s()/2, y * grid.sigma_s() + ry - grid.sigma_s()/2);
            val = clamp_f32(val, 0.0f, 1.0f);
            let zi = (val * (1.0f / grid.sigma_r()) + 0.5f) as i32;
            grid.write(x, y, zi, 0, grid.read(x, y, zi, 0) + val);
            grid.write(x, y, zi, 1, grid.read(x, y, zi, 1) + 1.0f);
        }
    }
}

fn slice_grid(x: i32, y: i32, grid: Grid, image: fn(i32, i32) -> f32, filter: fn(i32, i32, i32, i32, Grid) -> f32) -> f32 {
    // trilinear samples to compute the output
    let lerp         = @|a: f32, b: f32, w: f32| -> f32 { (1.0f - w) * a + w * b };
    let interpolate  = @|x: i32, y: i32, c: i32| -> f32 {
                        let val = clamp_f32(image(x, y), 0.0f, 1.0f);
                        let zv = val * (1.0f / grid.sigma_r());
                        let zi = zv as i32;
                        let zf = zv - zi as f32;
                        let xf = (x % grid.sigma_s()) as f32 / grid.sigma_s() as f32;
                        let yf = (y % grid.sigma_s()) as f32 / grid.sigma_s() as f32;
                        let xi =  x / grid.sigma_s();
                        let yi =  y / grid.sigma_s();
                        lerp(lerp(lerp(filter(xi, yi,   zi,   c, grid), filter(xi+1, yi,   zi,   c, grid), xf),
                                  lerp(filter(xi, yi+1, zi,   c, grid), filter(xi+1, yi+1, zi,   c, grid), xf), yf),
                             lerp(lerp(filter(xi, yi,   zi+1, c, grid), filter(xi+1, yi,   zi+1, c, grid), xf),
                                  lerp(filter(xi, yi+1, zi+1, c, grid), filter(xi+1, yi+1, zi+1, c, grid), xf), yf), zf)
                      };
    // normalize
    interpolate(x, y, 0) / interpolate(x, y, 1)
}


extern
fn bilateral_grid(image: &[f32], width: i32, height: i32) -> () {
    let sigma_s  = 8;
    let sigma_r  = 0.1f;
    let padding  = 2;
    let bins     = (1.0f  / sigma_r) as i32 + 2 * padding;
    let gwidth   = width  / sigma_s;
    let gheight  = height / sigma_s;
    let grid_buf = alloc_grid(gwidth * gheight * bins * sizeof[[f32*2]]());
    let grid = Grid {
        sigma_s : @|| sigma_s,
        sigma_r : @|| sigma_r,
        padding : @|| padding,
        width   : @|| gwidth,
        height  : @|| gheight,
        bins    : @|| bins,
        read    : grid_read_fn(gwidth, bins, padding, grid_buf),
        write   : grid_write_fn(gwidth, bins, padding, grid_buf),
    };

    let gpu_image = get_device_copy(image, width * height * sizeof[f32]());

    let input    = img_read_fn(gpu_image, width);
    let output   = img_write_fn(gpu_image, width);
    let clamped  = @|x: i32, y: i32| -> f32 { input(clamp_i32(x, 0, width), clamp_i32(y, 0, height)) };


    // blur the grid
    let blurz    = @|x: i32, y: i32, z: i32, c: i32, grid: Grid| -> f32 {
                     grid.read(x, y, z-2, c) +
                     grid.read(x, y, z-1, c) * 4.0f +
                     grid.read(x, y, z  , c) * 6.0f +
                     grid.read(x, y, z+1, c) * 4.0f +
                     grid.read(x, y, z+2, c)
                   };
    let blurx    = @|x: i32, y: i32, z: i32, c: i32, grid: Grid| -> f32 {
                     blurz(clamp_i32(x-2, 0, grid.width()), y, z, c, grid) +
                     blurz(clamp_i32(x-1, 0, grid.width()), y, z, c, grid) * 4.0f +
                     blurz(clamp_i32(x  , 0, grid.width()), y, z, c, grid) * 6.0f +
                     blurz(clamp_i32(x+1, 0, grid.width()), y, z, c, grid) * 4.0f +
                     blurz(clamp_i32(x+2, 0, grid.width()), y, z, c, grid)
                   };
    let blury    = @|x: i32, y: i32, z: i32, c: i32, grid: Grid| -> f32 {
                     blurx(x, clamp_i32(y-2, 0, grid.height()), z, c, grid) +
                     blurx(x, clamp_i32(y-1, 0, grid.height()), z, c, grid) * 4.0f +
                     blurx(x, clamp_i32(y  , 0, grid.height()), z, c, grid) * 6.0f +
                     blurx(x, clamp_i32(y+1, 0, grid.height()), z, c, grid) * 4.0f +
                     blurx(x, clamp_i32(y+2, 0, grid.height()), z, c, grid)
                   };
    let filter   = @|x: i32, y: i32, z: i32, c: i32, grid: Grid| -> f32 { blury(x, y, z, c, grid) };


    // init grid
    for x, y in iteration_grid(grid) {
        for z in range(-grid.padding(), grid.bins()-grid.padding()) {
            grid.write(x, y, z, 0, 0.0f);
            grid.write(x, y, z, 1, 0.0f);
        }
    }

    // compute grid
    for x, y in iteration_grid(grid) {
        create_grid(x, y, grid, clamped);
    }

    // slice grid
    for x, y in iteration_space(width, height) {
        output(x, y, slice_grid(x, y, grid, input, filter));
    }

    copy_to_host(image, gpu_image, width * height * sizeof[f32]());
    release_device_copy(gpu_image);

    release(grid_buf);

    print_total_timing()
}
